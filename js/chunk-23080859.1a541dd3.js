(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-23080859"],{"0493":function(s,a,t){s.exports=t.p+"img/微信截图_20211219173819.9a511975.png"},"0607":function(s,a,t){s.exports=t.p+"img/微信截图_20211220005321.ea65d979.png"},"0904":function(s,a,t){s.exports=t.p+"img/1639757871(1).ab1fc0d9.jpg"},"2d1d":function(s,a,t){s.exports=t.p+"img/微信截图_20211219153236.830c1454.png"},"2e2a":function(s,a,t){"use strict";t.r(a);var _=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},v=[function(){var s=this,a=s.$createElement,_=s._self._c||a;return _("div",{staticClass:"vc-snippet-doc"},[_("h1",[s._v("JavaScript 正则表达式迷你书")]),_("p",[_("code",[s._v("javascript-regular-expressions-mini-book")])]),_("p",[s._v("笔记：感谢这本📕的作者")]),_("p",[s._v("正则表达式是"),_("strong",[s._v("匹配模式")]),s._v("，要么"),_("strong",[s._v("匹配字符")]),s._v("，要么"),_("strong",[s._v("匹配位置")])]),_("p",[s._v("对于位置的理解，我们可以理解成"),_("strong",[s._v("空字符")])]),_("p",[s._v("第一章 正则表达式"),_("strong",[s._v("字符匹配")]),s._v("攻略")]),_("p",[s._v("第二章 正则表达式"),_("strong",[s._v("位置匹配")]),s._v("攻略")]),_("p",[s._v("第三章 正则表达式"),_("strong",[s._v("括号的作用")])]),_("p",[s._v("第四章 正则表达式"),_("strong",[s._v("回溯法原理")])]),_("p",[s._v("第五章 正则表达式的"),_("strong",[s._v("拆分")])]),_("p",[s._v("第六章 正则表达式的"),_("strong",[s._v("构建")])]),_("p",[s._v("第七章 正则表达式"),_("strong",[s._v("编程")])]),_("h3",[s._v("每一章都讨论了什么？")]),_("blockquote",[_("p",[s._v("正则是"),_("strong",[s._v("匹配模式")]),s._v("，要么"),_("strong",[s._v("匹配字符")]),s._v("，要么"),_("strong",[s._v("匹配位置")]),s._v("。")])]),_("p",[s._v("第一章和第二章以这个角度去讲解了正则表达式的基础。")]),_("blockquote",[_("p",[s._v("在正则可以"),_("strong",[s._v("使用括号捕获数据")]),s._v("，要么在 "),_("code",[s._v("API")]),s._v(" 中进行"),_("strong",[s._v("分组引用")]),s._v("，要么在正则里进行"),_("strong",[s._v("反向引用")]),s._v("。")])]),_("p",[s._v("第三章的主题，讲解了正则表达式中"),_("strong",[s._v("括号的作用")]),s._v("。")]),_("blockquote",[_("p",[s._v("学习正则，是需要了解其匹配原理的。")])]),_("p",[s._v("第四章，讲解了正则表达式的"),_("strong",[s._v("回溯法原理")]),s._v("。")]),_("p",[s._v("第五章，是从读的角度，去"),_("strong",[s._v("拆分一个正则表达式")]),s._v("，而第六章是从写的角度，去"),_("strong",[s._v("构建一个正则表达式")]),s._v("。")]),_("p",[s._v("第七章讲解了"),_("strong",[s._v("正则的用法")]),s._v("，和相关 "),_("code",[s._v("API")]),s._v(" 需要注意的地方。")]),_("h2",[s._v("第一章 正则表达式"),_("strong",[s._v("字符匹配")]),s._v("攻略")]),_("blockquote",[_("p",[s._v("正则表达式是"),_("strong",[s._v("匹配模式")]),s._v("，要么"),_("strong",[s._v("匹配字符")]),s._v("，要么"),_("strong",[s._v("匹配位置")]),s._v("。")])]),_("p",[s._v("元字符太多了，看起来没有系统性，不好记。")]),_("p",[s._v("内容包括：")]),_("p",[_("strong",[s._v("两种模糊匹配")])]),_("p",[_("strong",[s._v("字符组")])]),_("p",[_("strong",[s._v("量词")])]),_("p",[_("strong",[s._v("分支结构")])]),_("p",[_("strong",[s._v("案例分析")])]),_("h3",[s._v("1.1. 两种模糊匹配")]),_("p",[s._v("如果正则只有精确匹配是没多大意义的，比如 "),_("code",[s._v("/hello/")]),s._v("，也只能匹配字符串中的 "),_("code",[s._v('"hello"')]),s._v(" 这个子串。")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/hello/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("正则表达式之所以强大，是因为其能实现模糊匹配。 而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。")]),_("h4",[s._v("1.1.1. 横向模糊匹配")]),_("p",[s._v("横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。")]),_("p",[s._v("其实现的方式是"),_("strong",[s._v("使用量词")]),s._v("。譬如 "),_("code",[s._v("{m,n}")]),s._v("，表示连续出现最少 "),_("code",[s._v("m")]),s._v(" 次，最多 "),_("code",[s._v("n")]),s._v(" 次。")]),_("p",[s._v("比如正则 "),_("code",[s._v("/ab{2,5}c/")]),s._v(' 表示匹配这样一个字符串：第一个字符是 "'),_("code",[s._v("a")]),s._v('"，接下来是 '),_("code",[s._v("2")]),s._v(" 到 "),_("code",[s._v("5")]),s._v(' 个字符 "'),_("code",[s._v("b")]),s._v('"，最后 是字符 "'),_("code",[s._v("c")]),s._v('"。')]),_("p",[s._v("测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/ab{2,5}c/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"abc abbc abbbc abbbbc abbbbbc abbbbbbc"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["abbc", "abbbc", "abbbbc", "abbbbbc"]')]),s._v("\n")])]),_("blockquote",[_("p",[s._v("NOTE")])]),_("div",{staticClass:"tip"},[_("p",[s._v("案例中用的正则是 "),_("code",[s._v("/ab{2,5}c/g")]),s._v("，其中 "),_("code",[s._v("g")]),s._v(" 是正则的一个修饰符。表示全局匹配，即，在目 标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个” "),_("code",[s._v("。g")]),s._v(" 是单词 "),_("code",[s._v("global")]),s._v(" 的首字母。")])]),_("h4",[s._v("1.1.2. 纵向模糊匹配")]),_("p",[s._v("纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。")]),_("div",{staticClass:"warning"},[_("p",[s._v("其实现的方式是使用"),_("strong",[s._v("字符组")]),s._v("。")])]),_("p",[s._v("譬如 "),_("code",[s._v("[abc]")]),s._v("，表示该字符是可以字符 "),_("code",[s._v('"a"、"b"、"c"')]),s._v(" 中的任何一个。 比如 "),_("code",[s._v("/a[123]b/")]),s._v(" 可以匹配如下三种字符串： "),_("code",[s._v('"a1b"、"a2b"、"a3b"')])]),_("p",[s._v("测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/a[123]b/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"a0b a1b a2b a3b a4b"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["a1b", "a2b", "a3b"]')]),s._v("\n")])]),_("p",[s._v("以上就是本章讲的主体内容，只要掌握横向和纵向模糊匹配，就能解决很大部分正则匹配问题。")]),_("h3",[s._v("1.2. 字符组")]),_("p",[s._v("需要强调的是，虽叫"),_("strong",[s._v("字符组")]),s._v("（字符类），但只是其中一个字符。 例如 "),_("code",[s._v("[abc]")]),s._v("，表示匹配一个字符，它可以是 "),_("code",[s._v('"a"、"b"、"c"')]),s._v(" 之一。")]),_("h4",[s._v("1.2.1. 范围表示法")]),_("p",[s._v("如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。")]),_("p",[s._v("比如 "),_("code",[s._v("[123456abcdefGHIJKLM]")]),s._v("，可以写成 "),_("code",[s._v("[1-6a-fG-M]")]),s._v("。用连字符 - 来省略和简写。")]),_("p",[s._v("因为连字符有特殊用途，那么要匹配 "),_("code",[s._v('"a"、"-"、"z"')]),s._v(" 这三者中任意一个字符，该怎么做呢？")]),_("p",[s._v("不能写成 "),_("code",[s._v("[a-z]")]),s._v("，因为其表示小写字符中的任何一个字符。")]),_("p",[s._v("可以写成如下的方式："),_("code",[s._v("[-az]")]),s._v(" 或 "),_("code",[s._v("[az-] 或 [a\\-z]")]),s._v("。 即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。")]),_("h4",[s._v("1.2.2. 排除字符组")]),_("p",[s._v("纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是 "),_("code",[s._v('"a"、"b"、"c"')]),s._v("。")]),_("p",[s._v("此时就是"),_("strong",[s._v("排除字符组")]),s._v("（反义字符组）的概念。例如 "),_("code",[s._v("[^abc]")]),s._v("，表示是一个除 "),_("code",[s._v('"a"、"b"、"c"')]),s._v("之外的任意一个字 符。字符组的第一位放 "),_("code",[s._v("^")]),s._v("（"),_("strong",[s._v("脱字符")]),s._v("），表示求反的概念。")]),_("p",[s._v("当然，也有相应的范围表示法。")]),_("h4",[s._v("1.2.3. 常见的简写形式")]),_("p",[s._v("有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。")]),_("table",[_("thead",[_("tr",[_("th",[s._v("字符组")]),_("th",[s._v("具体含义")])])]),_("tbody",[_("tr",[_("td",[_("code",[s._v("\\d")])]),_("td",[s._v("表示 "),_("code",[s._v("[0-9]")]),s._v("。表示是"),_("strong",[s._v("一位数字")]),s._v("。 记忆方式：其英文是 "),_("code",[s._v("digit（数字）。")])])]),_("tr",[_("td",[_("code",[s._v("\\D")])]),_("td",[s._v("表示 "),_("code",[s._v("[^0-9]")]),s._v("。表示"),_("strong",[s._v("除数字外的任意字")]),s._v("符。")])]),_("tr",[_("td",[_("code",[s._v("\\w")])]),_("td",[s._v("表示 "),_("code",[s._v("[0-9a-zA-Z_]")]),s._v("。表示"),_("strong",[s._v("数字、大小写字母和下划线")]),s._v("。 记忆方式："),_("code",[s._v("w")]),s._v(" 是 "),_("code",[s._v("word")]),s._v(" 的简写，也称"),_("strong",[s._v("单词字符")]),s._v("。")])]),_("tr",[_("td",[_("code",[s._v("\\W")])]),_("td",[s._v("表示 "),_("code",[s._v("[^0-9a-zA-Z_]")]),s._v("。"),_("strong",[s._v("非单词字符")]),s._v("。")])]),_("tr",[_("td",[_("code",[s._v("\\s")])]),_("td",[s._v("表示 "),_("code",[s._v("[ \\t\\v\\n\\r\\f]")]),s._v("。表示"),_("strong",[s._v("空白符")]),s._v("，包括"),_("strong",[s._v("空格、水平制表符、垂直制表符、换行符、回车符、换页符")]),s._v("。记忆方式："),_("code",[s._v("s")]),s._v(" 是 "),_("code",[s._v("space")]),s._v(" 的首字母，空白符的单词是 "),_("code",[s._v("white space")]),s._v("。")])]),_("tr",[_("td",[_("code",[s._v("\\S")])]),_("td",[s._v("表示 "),_("code",[s._v("[^ \\t\\v\\n\\r\\f]")]),s._v("。 "),_("strong",[s._v("非空白符")]),s._v("。")])]),_("tr",[_("td",[_("code",[s._v(".")])]),_("td",[s._v("表示 "),_("code",[s._v("[^\\n\\r\\u2028\\u2029]")]),s._v("。通配符，表示几乎任意字符。"),_("strong",[s._v("换行符、回车符、行分隔符和段分隔符除外")]),s._v("。 记忆方式：想想省略号 "),_("code",[s._v("…")]),s._v(" 中的每个点，都可以理解成占位符，表示任何类似的东西。")])])])]),_("p",[s._v("如果要匹配任意字符怎么办？可以使用 "),_("code",[s._v("[\\d\\D]、[\\w\\W]、[\\s\\S] 和 [^]")]),s._v(" 中任何的一个。")]),_("h3",[s._v("1.3. 量词")]),_("p",[s._v("量词也称重复。掌握 "),_("code",[s._v("{m,n}")]),s._v(" 的准确含义后，只需要记住一些简写形式。")]),_("h4",[s._v("1.3.1. 简写形式")]),_("table",[_("thead",[_("tr",[_("th",[s._v("量词")]),_("th",[s._v("具体含义")])])]),_("tbody",[_("tr",[_("td",[_("code",[s._v("{m,}")])]),_("td",[s._v("表示至少出现 "),_("code",[s._v("m")]),s._v(" 次。")])]),_("tr",[_("td",[_("code",[s._v("{m}")])]),_("td",[s._v("等价于 "),_("code",[s._v("{m,m}")]),s._v("，表示出现 "),_("code",[s._v("m")]),s._v(" 次。")])]),_("tr",[_("td",[_("code",[s._v("?")])]),_("td",[s._v("等价于 "),_("code",[s._v("{0,1}")]),s._v("，表示"),_("strong",[s._v("出现或者不出现")]),s._v("。记忆方式：问号的意思表示，有吗？")])]),_("tr",[_("td",[_("code",[s._v("+")])]),_("td",[s._v("等价于 "),_("code",[s._v("{1,}")]),s._v("，表示"),_("strong",[s._v("出现至少一次")]),s._v("。 记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。")])]),_("tr",[_("td",[_("code",[s._v("*")])]),_("td",[s._v("等价于 "),_("code",[s._v("{0,}")]),s._v("，表示"),_("strong",[s._v("出现任意次")]),s._v("，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。")])])])]),_("h4",[s._v("1.3.2. 贪婪匹配与惰性匹配")]),_("p",[s._v("看如下的例子：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d{2,5}/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"123 1234 12345 123456"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["123", "1234", "12345", "12345"]')]),s._v("\n")])]),_("p",[s._v("其中正则 "),_("code",[s._v("/\\d{2,5}/")]),s._v("，表示数字连续出现 "),_("code",[s._v("2")]),s._v(" 到 "),_("code",[s._v("5")]),s._v(" 次。会匹配 "),_("code",[s._v("2 位、3 位、4 位、5 位")]),s._v("连续数字。")]),_("p",[s._v("但是其是贪婪的，它会尽可能多的匹配。你能给我 "),_("code",[s._v("6")]),s._v(" 个，我就要 "),_("code",[s._v("5")]),s._v(" 个。你能给我 "),_("code",[s._v("3")]),s._v(" 个，我就要 "),_("code",[s._v("3")]),s._v(" 个。")]),_("p",[s._v("反正只要在能力范围内，越多越好。 我们知道有时贪婪不是一件好事。而惰性匹配，就是尽可能少的匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d{2,5}?/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"123 1234 12345 123456"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["12", "12", "34", "12", "34", "12", "34", "56"]')]),s._v("\n")])]),_("p",[s._v("其中 "),_("code",[s._v("/\\d{2,5}?/")]),s._v(" 表示，虽然 2 到 5 次都行，当 2 个就够的时候，就不再往下尝试了。")]),_("p",[s._v("通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：")]),_("table",[_("thead",[_("tr",[_("th",[s._v("惰性量词")]),_("th",[s._v("贪婪量词")])])]),_("tbody",[_("tr",[_("td",[_("code",[s._v("{m,n}?")])]),_("td",[_("code",[s._v("{m,n}")])])]),_("tr",[_("td",[_("code",[s._v("{m,}?")])]),_("td",[_("code",[s._v("{m,}")])])]),_("tr",[_("td",[_("code",[s._v("??")])]),_("td",[_("code",[s._v("?")])])]),_("tr",[_("td",[_("code",[s._v("+?")])]),_("td",[_("code",[s._v("+")])])]),_("tr",[_("td",[_("code",[s._v("*?")])]),_("td",[_("code",[s._v("*")])])])])]),_("div",{staticClass:"tip"},[_("p",[s._v("TIP 对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？")])]),_("h3",[s._v("1.4. 多选分支")]),_("p",[s._v("一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。")]),_("p",[s._v("具体形式如下："),_("code",[s._v("(p1|p2|p3)")]),s._v("，其中 "),_("code",[s._v("p1、p2 和 p3")]),s._v(" 是子模式，用 "),_("code",[s._v("|")]),s._v("（管道符）分隔，表示其中任何之一。")]),_("p",[s._v('例如要匹配字符串 "'),_("code",[s._v("good")]),s._v('" 和 "'),_("code",[s._v("nice")]),s._v('" 可以使用 '),_("code",[s._v("/good|nice/")]),s._v("。")]),_("p",[s._v("测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/good|nice/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"good idea, nice try."')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["good", "nice"]')]),s._v("\n")])]),_("p",[s._v("但有个事实我们应该注意，比如我用 "),_("code",[s._v("/good|goodbye/")]),s._v("，去匹配 "),_("code",[s._v('"goodbye"')]),s._v(" 字符串时，结果是 "),_("code",[s._v('"good"')]),s._v("：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/good|goodbye/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"goodbye"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["good"]')]),s._v("\n")])]),_("p",[s._v("而把正则改成 "),_("code",[s._v("/goodbye|good/")]),s._v("，结果是：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/goodbye|good/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"goodbye"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["goodbye"]')]),s._v("\n")])]),_("p",[s._v("也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。")]),_("h3",[s._v("1.5. 案例分析")]),_("p",[s._v("匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。")]),_("p",[s._v("下面找几个例子演练一下（其中，每个正则并不是只有唯一写法）：")]),_("h4",[s._v("1.5.1. 匹配 16 进制颜色值 要求匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("#ffbbad\n#"),_("span",{staticClass:"hljs-title class_"},[s._v("Fc01")]),s._v("DF\n#"),_("span",{staticClass:"hljs-variable constant_"},[s._v("FFF")]),s._v("\n#ffE\n")])]),_("p",[s._v("分析： 表示一个 16 进制字符，可以用字符组 "),_("code",[s._v("[0-9a-fA-F]")]),s._v("。")]),_("p",[s._v("其中字符可以出现 3 或 6 次，需要是用量词和分支结构。")]),_("p",[s._v("使用分支结构时，需要注意顺序。")]),_("p",[s._v("正则如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"#ffbbad #Fc01DF #FFF #ffE"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]')]),s._v("\n")])]),_("h4",[s._v("1.5.2. 匹配时间")]),_("p",[s._v("以 24 小时制为例。 要求匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-number"},[s._v("23")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("59")]),s._v("\n"),_("span",{staticClass:"hljs-number"},[s._v("02")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("07")]),s._v("\n")])]),_("p",[s._v("分析：")]),_("p",[s._v("共 4 位数字，第一位数字可以为 "),_("code",[s._v("[0-2]")]),s._v("。")]),_("p",[s._v('当第 1 位为 "2" 时，第 2 位可以为 '),_("code",[s._v("[0-3]")]),s._v("，其他情况时，第 2 位为 "),_("code",[s._v("[0-9]")]),s._v("。")]),_("p",[s._v("第 3 位数字为 "),_("code",[s._v("[0-5]")]),s._v("，第4位为 "),_("code",[s._v("[0-9]")]),s._v("。")]),_("p",[s._v("正则如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^([01][0-9]|[2][0-3]):[0-5][0-9]$/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"23:59"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"02:07"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("NOTE 正则中使用了 "),_("code",[s._v("^")]),s._v(" 和 "),_("code",[s._v("$")]),s._v("，分别表示字符串开头和结尾。")]),_("p",[s._v("如果也要求匹配 "),_("code",[s._v('"7:9"')]),s._v("，也就是说时分前面的 "),_("code",[s._v('"0"')]),s._v(" 可以省略。")]),_("p",[s._v("此时正则变成：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"23:59"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"02:07"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"7:9"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("h4",[s._v("1.5.3. 匹配日期")]),_("p",[s._v("比如 "),_("code",[s._v("yyyy-mm-dd")]),s._v(" 格式为例。 要求匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-number"},[s._v("2017")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("06")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("10")]),s._v("\n")])]),_("p",[s._v("分析：")]),_("p",[s._v("年，四位数字即可，可用 "),_("code",[s._v("[0-9]{4}")]),s._v("。")]),_("p",[s._v("月，共 12 个月，分两种情况 "),_("code",[s._v('"01"、"02"、…、"09" 和 "10"、"11"、"12"')]),s._v("，可用 "),_("code",[s._v("(0[1-9]|1[0-2])")]),s._v("。")]),_("p",[s._v("日，最大 31 天，可用 "),_("code",[s._v("(0[1-9]|[12][0-9]|3[01])")]),s._v("。")]),_("p",[s._v("正则如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-10"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("h4",[s._v("1.5.4. window 操作系统文件路径")]),_("p",[s._v("要求匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-attr"},[s._v("F")]),s._v(":\\study\\javascript\\regex\\regular expression."),_("span",{staticClass:"hljs-property"},[s._v("pdf")]),s._v("\n"),_("span",{staticClass:"hljs-attr"},[s._v("F")]),s._v(":\\study\\javascript\\regex\\\n"),_("span",{staticClass:"hljs-attr"},[s._v("F")]),s._v(":\\study\\javascript\n"),_("span",{staticClass:"hljs-attr"},[s._v("F")]),s._v(":\\\n")])]),_("p",[s._v("分析：")]),_("p",[s._v("整体模式是:")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("盘符:\\文件夹\\文件夹\\文件夹\\\n")])]),_("p",[s._v("其中匹配 "),_("code",[s._v('"F:\\"')]),s._v("，需要使用 "),_("code",[s._v("[a-zA-Z]:\\\\")]),s._v("，其中盘符不区分大小写，注意 "),_("code",[s._v("\\")]),s._v(" 字符需要转义。")]),_("p",[s._v("文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组 "),_("code",[s._v('[^\\\\:*<>|"?\\r\\n/]')]),s._v(" 来表示合法字符。")]),_("p",[s._v("另外它们的名字不能为空名，至少有一个字符，也就是要使用量词 "),_("code",[s._v("+")]),s._v("。因此匹配 "),_("code",[s._v("文件夹\\")]),s._v("，可用 "),_("code",[s._v('[^\\\\:*<>|"?\\r\\n/]+\\\\')]),s._v("。")]),_("p",[s._v("另外 "),_("code",[s._v("文件夹\\")]),s._v("，可以出现任意次。也就是 "),_("code",[s._v('([^\\\\:*<>|"?\\r\\n/]+\\\\)*')]),s._v("。其中括号表示其内部正则是一个整体。")]),_("p",[s._v("路径的最后一部分可以是 "),_("code",[s._v("文件夹")]),s._v("，没有 "),_("code",[s._v("\\")]),s._v("，因此需要添加 "),_("code",[s._v('([^\\\\:*<>|"?\\r\\n/]+)?')]),s._v("。")]),_("p",[s._v("最后拼接成了一个看起来比较复杂的正则：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v('/^[a-zA-Z]:\\\\([^\\\\:*<>|"?\\r\\n/]+\\\\)*([^\\\\:*<>|"?\\r\\n/]+)?$/')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"F:\\\\study\\\\javascript\\\\regex\\\\regular expression.pdf"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"F:\\\\study\\\\javascript\\\\regex\\\\"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"F:\\\\study\\\\javascript"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"F:\\\\"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("其中，在JavaScript 中字符串要表示字符 "),_("code",[s._v("\\")]),s._v(" 时，也需要转义。")]),_("h4",[s._v("1.5.5. 匹配 id")]),_("p",[s._v("要求从")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("<div id="),_("span",{staticClass:"hljs-string"},[s._v('"container"')]),s._v(" "),_("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"main"')]),s._v("></div>\n")])]),_("p",[s._v("提取出 "),_("code",[s._v('id="container"')]),s._v("。")]),_("p",[s._v("可能最开始想到的正则是：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v('/id=".*"/')]),s._v("\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('\'<div id="container" class="main"></div>\'')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex)["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("]);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => id="container" class="main"')]),s._v("\n")])]),_("p",[s._v("因为 "),_("code",[s._v(".")]),s._v(" 是通配符，本身就匹配双引号的，而量词 "),_("code",[s._v("*")]),s._v(" 又是贪婪的，当遇到 "),_("code",[s._v("container")]),s._v(" 后面双引号时，是不会停下来，会继续匹配，直到遇到最后一个双引号为止。")]),_("p",[s._v("解决之道，可以使用惰性匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v('/id=".*?"/')]),s._v("\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('\'<div id="container" class="main"></div>\'')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex)["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("]);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => id="container"')]),s._v("\n")])]),_("p",[s._v("当然，这样也会有个问题。效率比较低，因为其匹配原理会涉及到“回溯”这个概念。可以优化如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v('/id="[^"]*"/')]),s._v("\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('\'<div id="container" class="main"></div>\'')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex)["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("]);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => id="container')]),s._v("\n")])]),_("h2",[s._v("2. 第二章 正则表达式位置匹配攻略")]),_("p",[s._v("正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。")]),_("p",[s._v("然而大部分人学习正则时，对于匹配位置的重视程度没有那么高。")]),_("p",[s._v("内容包括：")]),_("ul",[_("li",[s._v("什么是位置？")]),_("li",[s._v("如何匹配位置？")]),_("li",[s._v("位置的特性")]),_("li",[s._v("几个应用实例分析")])]),_("h3",[s._v("2.1. 什么是位置呢？")]),_("p",[s._v("位置（锚）是相邻字符之间的位置。比如，下图中箭头所指的地方")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("0904")}}),_("h3",[s._v("2.2. 如何匹配位置呢？")]),_("p",[s._v("在 "),_("code",[s._v("ES5")]),s._v(" 中，共有 6 个锚： "),_("code",[s._v("^、$、\\b、\\B、(?=p)、(?!p)")])]),_("h4",[s._v("2.2.1. "),_("code",[s._v("^")]),s._v(" 和 "),_("code",[s._v("$")])]),_("p",[_("code",[s._v("^")]),s._v("（脱字符）匹配开头，在多行匹配中匹配行开头。")]),_("p",[_("code",[s._v("$")]),s._v("（美元符号）匹配结尾，在多行匹配中匹配行结尾。")]),_("p",[s._v('比如我们把字符串的开头和结尾用 "'),_("code",[s._v("#")]),s._v('" 替换（位置可以替换成字符的！）：')]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/^|$/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("'#'")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "#hello#"')]),s._v("\n")])]),_("p",[s._v("多行匹配模式（即有修饰符 "),_("code",[s._v("m")]),s._v("）时，二者是行的概念，这一点需要我们注意：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"I\\nlove\\njavascript"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/^|$/gm")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("'#'")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v("/*\n#I#\n#love#\n#javascript#\n*/")]),s._v("\n")])]),_("h4",[s._v("2.2.2. "),_("code",[s._v("\\b")]),s._v(" 和 "),_("code",[s._v("\\B")])]),_("p",[_("code",[s._v("\\b")]),s._v(" 是单词边界，具体就是 "),_("code",[s._v("\\w")]),s._v(" 与 "),_("code",[s._v("\\W ")]),s._v("之间的位置，也包括 "),_("code",[s._v("\\w")]),s._v(" 与 "),_("code",[s._v("^")]),s._v(" 之间的位置，和 "),_("code",[s._v("\\w")]),s._v(" 与 "),_("code",[s._v("$")]),s._v(" 之间的位置。")]),_("p",[s._v("比如考察文件名 "),_("code",[s._v('"[JS] Lesson_01.mp4"')]),s._v(" 中的 "),_("code",[s._v("\\b")]),s._v("，如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"[JS] Lesson_01.mp4"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/\\b/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("'#'")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "[#JS#] #Lesson_01#.#mp4#"')]),s._v("\n")])]),_("p",[s._v("为什么是这样呢？这需要仔细看看。")]),_("p",[s._v("首先，我们知道，"),_("code",[s._v("\\w")]),s._v(" 是字符组 "),_("code",[s._v("[0-9a-zA-Z_]")]),s._v(" 的简写形式，即 "),_("code",[s._v("\\w")]),s._v(" 是字母数字或者下划线的中任何一个字符。而 "),_("code",[s._v("\\W")]),s._v(" 是排除字符组 "),_("code",[s._v("[^0-9a-zA-Z_]")]),s._v(" 的简写形式，即 "),_("code",[s._v("\\W")]),s._v(" 是 "),_("code",[s._v("\\w")]),s._v(" 以外的任何一个字符。")]),_("p",[s._v("此时我们可以看看 "),_("code",[s._v('"[#JS#] #Lesson_01#.#mp4#"')]),s._v(" 中的每一个井号 ，是怎么来的。")]),_("p",[s._v("第 1 个，两边字符是 "),_("code",[s._v('"[" 与 "J"，是 \\W 与 \\w 之间')]),s._v("的位置。")]),_("p",[s._v("第 2 个，两边字符是 "),_("code",[s._v('"S" 与 "]"，也就是 \\w 与 \\W 之间')]),s._v("的位置。")]),_("p",[s._v("第 3 个，两边字符是 "),_("code",[s._v('空格与 "L"，也就是 \\W 与 \\w 之间')]),s._v("的位置。")]),_("p",[s._v("第 4 个，两边字符是 "),_("code",[s._v('"1" 与 "."，也就是 \\w 与 \\W 之间')]),s._v("的位置。")]),_("p",[s._v("第 5 个，两边字符是 "),_("code",[s._v('"." 与 "m"，也就是 \\W 与 \\w之间')]),s._v("的位置。")]),_("p",[s._v('第 6 个，位于结尾，前面的字符 "4" 是 '),_("code",[s._v("\\w")]),s._v("，"),_("code",[s._v("即 \\w 与 $ 之间")]),s._v("的位置。")]),_("p",[s._v("知道了 "),_("code",[s._v("\\b")]),s._v(" 的概念后，那么 "),_("code",[s._v("\\B")]),s._v(" 也就相对好理解了。")]),_("p",[_("code",[s._v("\\B")]),s._v(" 就是 "),_("code",[s._v("\\b")]),s._v(" 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 "),_("code",[s._v("\\b")]),s._v("，剩下的都是 "),_("code",[s._v("\\B")]),s._v(" 的。")]),_("p",[s._v("具体说来就是 "),_("code",[s._v("\\w")]),s._v(" 与 "),_("code",[s._v("\\w")]),s._v("、 "),_("code",[s._v("\\W")]),s._v(" 与 "),_("code",[s._v("\\W")]),s._v("、"),_("code",[s._v("^")]),s._v(" 与 "),_("code",[s._v("\\W")]),s._v("，"),_("code",[s._v("\\W")]),s._v(" 与 "),_("code",[s._v("$")]),s._v(" 之间的位置。")]),_("p",[s._v("比如上面的例子，把所有 "),_("code",[s._v("\\B")]),s._v(" 替换成 "),_("code",[s._v('"#"')]),s._v("：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"[JS] Lesson_01.mp4"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/\\B/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("'#'")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"')]),s._v("\n")])]),_("h4",[s._v("2.2.3. "),_("code",[s._v("(?=p) 和 (?!p)")])]),_("p",[_("code",[s._v("(?=p)")]),s._v("，其中 "),_("code",[s._v("p")]),s._v(" 是一个子模式，即 "),_("code",[s._v("p")]),s._v(" 前面的位置，或者说，该位置后面的字符要匹配 "),_("code",[s._v("p")]),s._v("。")]),_("p",[s._v("比如 "),_("code",[s._v("(?=l)")]),s._v("，表示 "),_("code",[s._v('"l"')]),s._v(" 字符前面的位置，例如：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(?=l)/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("'#'")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "he#l#lo"')]),s._v("\n")])]),_("p",[s._v("而 "),_("code",[s._v("(?!p)")]),s._v(" 就是 "),_("code",[s._v("(?=p)")]),s._v(" 的反面意思，比如：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(?!l)/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("'#'")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "#h#ell#o#"')]),s._v("\n")])]),_("p",[s._v("二者的学名分别是 "),_("code",[s._v("positive lookahead")]),s._v(" 和 "),_("code",[s._v("negative lookahead")]),s._v("。")]),_("p",[s._v("中文翻译分别是"),_("strong",[s._v("正向先行断言")]),s._v("和"),_("strong",[s._v("负向先行断言")]),s._v("。")]),_("p",[_("code",[s._v("ES5")]),s._v(" 之后的版本，会支持 "),_("code",[s._v("positive lookbehind")]),s._v(" 和 "),_("code",[s._v("negative lookbehind")]),s._v("。 具体是 "),_("code",[s._v("(?<=p)")]),s._v(" 和 "),_("code",[s._v("(?<!p)")]),s._v("。")]),_("p",[s._v("也有书上把这四个东西，翻译成"),_("strong",[s._v("环视")]),s._v("，即看看右边和看看左边。")]),_("p",[s._v("但一般书上，没有很好强调这四者是个位置。")]),_("p",[s._v("比如 "),_("code",[s._v("(?=p)")]),s._v("，一般都理解成：要求接下来的字符与 "),_("code",[s._v("p")]),s._v(" 匹配，但不能包括 "),_("code",[s._v("p")]),s._v(" 匹配的那些字符。")]),_("p",[s._v("而在本人看来，"),_("code",[s._v("(?=p)")]),s._v(" 就与 "),_("code",[s._v("^")]),s._v(" 一样好理解，就是 "),_("code",[s._v("p")]),s._v(" 前面的那个位置。")]),_("h3",[s._v("2.3. 位置的特性")]),_("p",[s._v("对于位置的理解，我们可以理解成空字符 "),_("code",[s._v('""')]),s._v("。")]),_("p",[s._v("比如 "),_("code",[s._v('"hello"')]),s._v(" 字符串等价于如下的形式：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v(" == "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"h"')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"e"')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"l"')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"l"')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"o"')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v("; \n")])]),_("p",[s._v("也等价于：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v(" == "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v(" \n")])]),_("p",[s._v("因此，把 "),_("code",[s._v("/^hello$/")]),s._v(" 写成 "),_("code",[s._v("/^^hello$$$/")]),s._v("，是没有任何问题的：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^^hello$$$/")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("甚至可以写成更复杂的:")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(?=he)^^he(?=\\w)llo$\\b\\b$/")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"hello"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("也就是说字符之间的位置，可以写成多个。")]),_("div",{staticClass:"tip"},[_("p",[s._v("TIP 把位置理解空字符，是对位置非常有效的理解方式。")])]),_("h3",[s._v("2.4. 相关案例")]),_("h4",[s._v("2.4.1. 不匹配任何东西的正则")]),_("p",[s._v("让你写个正则不匹配任何东西")]),_("p",[s._v("easy，"),_("code",[s._v("/.^/")]),s._v("。 因为此正则要求只有一个字符，但该字符后面是开头，而这样的字符串是不存在的。")]),_("h4",[s._v("2.4.2 数字的千位分隔符表示法")]),_("p",[s._v("比如把 "),_("code",[s._v('"12345678"')]),s._v("，变成 "),_("code",[s._v('"12,345,678"')]),s._v("。")]),_("p",[s._v("可见是需要把相应的位置替换成 "),_("code",[s._v('","')]),s._v("。")]),_("p",[s._v("思路是什么呢？")]),_("h5",[s._v("2.4.2.1. 弄出最后一个逗号")]),_("p",[s._v("使用 "),_("code",[s._v("(?=\\d{3}$)")]),s._v(" 就可以做到：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"12345678"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(?=\\d{3}$)/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(")\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "12345,678"')]),s._v("\n")])]),_("p",[s._v("其中，"),_("code",[s._v("(?=\\d{3}$)")]),s._v(" 匹配 "),_("code",[s._v("\\d{3}$")]),s._v(" 前面的位置。而 "),_("code",[s._v("\\d{3}$")]),s._v(" 匹配的是目标字符串最后那 "),_("code",[s._v("3")]),s._v(" 位数字。")]),_("h5",[s._v("2.4.2.2. 弄出所有的逗号")]),_("p",[s._v("因为逗号出现的位置，要求后面 3 个数字一组，也就是 "),_("code",[s._v("\\d{3}")]),s._v(" 至少出现一次。")]),_("p",[s._v("此时可以使用量词 "),_("code",[s._v("+")]),s._v("：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"12345678"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(?=(\\d{3})+$)/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(")\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "12,345,678"')]),s._v("\n")])]),_("h5",[s._v("2.4.2.3. 匹配其余案例")]),_("p",[s._v("写完正则后，要多验证几个案例，此时我们会发现问题：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"123456789"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(?=(\\d{3})+$)/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(")\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ",123,456,789"')]),s._v("\n")])]),_("p",[s._v("因为上面的正则，仅仅表示把从结尾向前数，一但是 3 的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。")]),_("p",[s._v("怎么解决呢？我们要求匹配的到这个位置不能是开头。")]),_("p",[s._v("我们知道匹配开头可以使用 "),_("code",[s._v("^")]),s._v("，但要求这个位置不是开头怎么办？")]),_("p",[s._v("easy，"),_("code",[s._v("(?!^)")]),s._v("，你想到了吗？测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(?!^)(?=(\\d{3})+$)/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"12345678"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("(regex, "),_("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(")\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "12,345,678"')]),s._v("\nresult = "),_("span",{staticClass:"hljs-string"},[s._v('"123456789"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("(regex, "),_("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "123,456,789"')]),s._v("\n")])]),_("h5",[s._v("2.4.2.4. 支持其他形式")]),_("p",[s._v("如果要把 "),_("code",[s._v('"12345678 123456789"')]),s._v(" 替换成 "),_("code",[s._v('"12,345,678 123,456,789"。')])]),_("p",[s._v("此时我们需要修改正则，把里面的开头 "),_("code",[s._v("^")]),s._v(" 和结尾 "),_("code",[s._v("$")]),s._v("，修改成 "),_("code",[s._v("\\b")]),s._v("：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"12345678 123456789"')]),s._v(",\nregex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(?!\\b)(?=(\\d{3})+\\b)/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = string."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("(regex, "),_("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(")\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "12,345,678 123,456,789"')]),s._v("\n")])]),_("p",[s._v("其中 "),_("code",[s._v("(?!\\b)")]),s._v(" 怎么理解呢？")]),_("p",[s._v("要求当前是一个位置，但不是 "),_("code",[s._v("\\b")]),s._v(" 前面的位置，其实 "),_("code",[s._v("(?!\\b)")]),s._v(" 说的就是 "),_("code",[s._v("\\B")]),s._v("。")]),_("p",[s._v("因此最终正则变成了："),_("code",[s._v("/\\B(?=(\\d{3})+\\b)/g。")])]),_("h5",[s._v("2.4.2.5. 格式化")]),_("p",[s._v("千分符表示法一个常见的应用就是货币格式化。")]),_("p",[s._v("比如把下面的字符串：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-number"},[s._v("1888")]),s._v("\n")])]),_("p",[s._v("格式化成：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("$ "),_("span",{staticClass:"hljs-number"},[s._v("1888.00")]),s._v("\n")])]),_("p",[s._v("有了前面的铺垫，我们很容易实现如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("format")]),s._v(" (num) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" num."),_("span",{staticClass:"hljs-title function_"},[s._v("toFixed")]),s._v("("),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(")."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/\\B(?=(\\d{3})+\\b)/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('","')]),s._v(")."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/^/")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('"$$ "')]),s._v("); };\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title function_"},[s._v("format")]),s._v("("),_("span",{staticClass:"hljs-number"},[s._v("1888")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "$ 1,888.00"')]),s._v("\n")])]),_("h4",[s._v("2.4.3. 验证密码问题")]),_("p",[s._v("密码长度 "),_("code",[s._v("6-12")]),s._v(" 位，由数字、小写字符和大写字母组成，但必须至少包括 "),_("code",[s._v("2")]),s._v(" 种字符。")]),_("p",[s._v("此题，如果写成多个正则来判断，比较容易。但要写成一个正则就比较困难。")]),_("p",[s._v("那么，我们就来挑战一下。看看我们对位置的理解是否深刻。")]),_("h5",[s._v("2.4.3.1. 简化")]),_("p",[s._v("不考虑“但必须至少包括 "),_("code",[s._v("2")]),s._v(" 种字符”这一条件。我们可以容易写出：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^[0-9A-Za-z]{6,12}$/")]),s._v(";\n")])]),_("p",[s._v("2.4.3.2. 判断是否包含有某一种字符")]),_("p",[s._v("假设，要求的必须包含数字，怎么办？此时我们可以使用 "),_("code",[s._v("(?=.*[0-9])")]),s._v(" 来做。")]),_("p",[s._v("因此正则变成：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(?=.*[0-9])^[0-9A-Za-z]{6,12}$/")]),s._v(";\n")])]),_("h5",[s._v("2.4.3.3. 同时包含具体两种字符")]),_("p",[s._v("比如同时包含数字和小写字母，可以用 "),_("code",[s._v("(?=.*[0-9])(?=.*[a-z])")]),s._v(" 来做。")]),_("p",[s._v("因此正则变成：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]{6,12}$/")]),s._v(";\n")])]),_("h5",[s._v("2.4.3.4. 解答 我们可以把原题变成下列几种情况之一：")]),_("p",[s._v("同时包含数字和小写字母")]),_("p",[s._v("同时包含数字和大写字母")]),_("p",[s._v("同时包含小写字母和大写字母")]),_("p",[s._v("同时包含数字、小写字母和大写字母")]),_("p",[s._v("以上的 4 种情况是或的关系（实际上，可以不用第 4 条）。")]),_("p",[s._v("最终答案是：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[AZ]))^[0-9A-Za-z]{6,12}$/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"1234567"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false 全是数字")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"abcdef"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false 全是小写字母")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"ABCDEFGH"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false 全是大写字母")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"ab23C"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false 不足6位")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"ABCDEF234"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true 大写字母和数字")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"abcdEF234"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true 三者都有")]),s._v("\n")])]),_("h5",[s._v("2.4.3.5. 解惑")]),_("p",[s._v("上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/(?=.*["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("])^["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-9A-"),_("span",{staticClass:"hljs-title class_"},[s._v("Za")]),s._v("-z]{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("12")]),s._v("}$/\n")])]),_("p",[s._v("对于这个正则，我们只需要弄明白 "),_("code",[s._v("(?=.*[0-9])^")]),s._v(" 即可。")]),_("p",[s._v("分开来看就是 "),_("code",[s._v("(?=.*[0-9])")]),s._v(" 和 "),_("code",[s._v("^")]),s._v("。")]),_("p",[s._v("表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。")]),_("p",[_("code",[s._v("(?=.*[0-9])")]),s._v(" 表示该位置后面的字符匹配 "),_("code",[s._v(".*[0-9]")]),s._v("，即，有任何多个任意字符，后面再跟个数字。")]),_("p",[s._v("翻译成大白话，就是接下来的字符，必须包含个数字。")]),_("h5",[s._v("2.4.3.6. 另外一种解法")]),_("p",[s._v("“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。")]),_("p",[s._v("那么要求“不能全部都是数字”，怎么做呢？ "),_("code",[s._v("(?!p)")]),s._v(" 出马！")]),_("p",[s._v("对应的正则是：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(?!^[0-9]{6,12}$)^[0-9A-Za-z]{6,12}$/")]),s._v(";\n")])]),_("p",[s._v("三种“都不能”呢？")]),_("p",[s._v("最终答案是：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"1234567"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false 全是数字")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"abcdef"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false 全是小写字母")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"ABCDEFGH"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false 全是大写字母")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"ab23C"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false 不足6位")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"ABCDEF234"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true 大写字母和数字")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"abcdEF234"')]),s._v(") ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true 三者都有")]),s._v("\n")])]),_("p",[s._v("小结 重点掌握匹配位置的这 6 个锚，给我们的解决正则问题工具箱内添加了新工具。")]),_("h2",[s._v("3. 第三章 正则表达式括号的作用")]),_("p",[s._v("不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。")]),_("p",[s._v("对括号的使用是否得心应手，是衡量对正则的掌握水平的一个侧面标准。")]),_("p",[s._v("括号的作用，其实三言两语就能说明白，括号提供了分组，便于我们引用它。")]),_("p",[s._v("引用某个分组，会有两种情形：在 JavaScript 里引用它，在正则表达式里引用它。")]),_("p",[s._v("内容包括：")]),_("p",[_("strong",[s._v("分组和分支结构")])]),_("p",[_("strong",[s._v("分组引用")])]),_("p",[_("strong",[s._v("反向引用")])]),_("p",[_("strong",[s._v("非捕获括号")])]),_("p",[_("strong",[s._v("相关案例")])]),_("h3",[s._v("3.1. 分组和分支结构")]),_("p",[s._v("这二者是括号最直觉的作用，也是最原始的功能，强调括号内的正则是一个整体，即提供子表达式。")]),_("h4",[s._v("3.1.1. 分组")]),_("p",[s._v("我们知道 "),_("code",[s._v("/a+/")]),s._v(" 匹配连续出现的 "),_("code",[s._v('"a"')]),s._v("，而要匹配连续出现的 "),_("code",[s._v('"ab"')]),s._v(" 时，需要使用 "),_("code",[s._v("/(ab)+/")]),s._v("。")]),_("p",[s._v("其中括号是提供"),_("strong",[s._v("分组功能")]),s._v("，使量词 "),_("code",[s._v("+")]),s._v(" 作用于 "),_("code",[s._v('"ab"')]),s._v(" 这个整体，测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(ab)+/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"ababa abbb ababab"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["abab", "ab", "ababab"]')]),s._v("\n")])]),_("h4",[s._v("3.1.2. 分支结构")]),_("p",[s._v("而在多选分支结构 "),_("code",[s._v("(p1|p2)")]),s._v(" 中，此处括号的作用也是不言而喻的，提供了分支表达式的所有可能。")]),_("p",[s._v("比如，要匹配如下的字符串：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("I love "),_("span",{staticClass:"hljs-title class_"},[s._v("JavaScript")]),s._v("\nI love "),_("span",{staticClass:"hljs-title class_"},[s._v("Regular")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("Expression")]),s._v("\n")])]),_("p",[s._v("可以使用正则：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^I love (JavaScript|Regular Expression)$/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"I love JavaScript"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"I love Regular Expression"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("如果去掉正则中的括号，即：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/^I love "),_("span",{staticClass:"hljs-title class_"},[s._v("JavaScript")]),s._v("|"),_("span",{staticClass:"hljs-title class_"},[s._v("Regular")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("Expression")]),s._v("$/，\n")])]),_("p",[s._v("匹配字符串是 "),_("code",[s._v('"I love JavaScript" ')]),s._v("和 "),_("code",[s._v('"Regular Expression"')]),s._v("，当然这不是我们想要的。")]),_("h3",[s._v("3.2. 分组引用")]),_("p",[s._v("这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作。")]),_("p",[s._v("而要使用它带来的好处，必须配合使用实现环境的 "),_("code",[s._v("API。")])]),_("p",[s._v("以日期为例。假设格式是 "),_("code",[s._v("yyyy-mm-dd")]),s._v(" 的，我们可以先写一个简单的正则：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d{4}-\\d{2}-\\d{2}/")]),s._v(";\n")])]),_("p",[s._v("然后再修改成括号版的：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n")])]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"80%"},attrs:{src:t("7af4")}}),_("p",[s._v("对比这两个可视化图片，我们发现，与前者相比，后者多了分组编号，如 "),_("code",[s._v("Group #1")]),s._v("。")]),_("p",[s._v("其实正则引擎也是这么做的，在匹配过程中，给每一个分组都开辟一个空间，用来存储每一个分组匹配到的数据。")]),_("p",[s._v("既然分组可以捕获数据，那么我们就可以使用它们。")]),_("h4",[s._v("3.2.1. 提取数据")]),_("p",[s._v("比如提取出年、月、日，可以这么做：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-12"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]')]),s._v("\n")])]),_("p",[s._v("NOTE")]),_("p",[_("code",[s._v("match")]),s._v(" 返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。另外，正则表达式是否有修饰符 "),_("code",[s._v("g，match")]),s._v("返回的数组格式是不一样的。")]),_("p",[s._v("另外也可以使用正则实例对象的 "),_("code",[s._v("exec")]),s._v(" 方法：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-12"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]')]),s._v("\n")])]),_("p",[s._v("同时，也可以使用构造函数的全局属性 "),_("code",[s._v("$1")]),s._v(" 至 "),_("code",[s._v("$9")]),s._v(" 来获取：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-12"')]),s._v(";\nregex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string); "),_("span",{staticClass:"hljs-comment"},[s._v("// 正则操作即可，例如")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("//regex.exec(string);")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("//string.match(regex);")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("("),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$1")]),s._v("); "),_("span",{staticClass:"hljs-comment"},[s._v('// "2017"')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("("),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$2")]),s._v("); "),_("span",{staticClass:"hljs-comment"},[s._v('// "06"')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("("),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$3")]),s._v("); "),_("span",{staticClass:"hljs-comment"},[s._v('// "12"')]),s._v("\n")])]),_("h4",[s._v("3.2.2. 替换")]),_("p",[s._v("比如，想把 "),_("code",[s._v("yyyy-mm-dd")]),s._v(" 格式，替换成 "),_("code",[s._v("mm/dd/yyyy")]),s._v(" 怎么做？")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = string."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("(regex, "),_("span",{staticClass:"hljs-string"},[s._v('"$2/$3/$1"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "06/12/2017"')]),s._v("\n")])]),_("p",[s._v("其中 "),_("code",[s._v("replace")]),s._v(" 中的，第二个参数里用 "),_("code",[s._v("$1、$2、$3")]),s._v(" 指代相应的分组。等价于如下的形式：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = string."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("(regex, "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"}),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$2")]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(" + "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$3")]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(" + "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$1")]),s._v(";\n});\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "06/12/2017"')]),s._v("\n")])]),_("p",[s._v("也等价于：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = string."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("(regex, "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("match, year, month, day")]),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" month + "),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(" + day + "),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(" + year;\n});\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "06/12/2017"')]),s._v("\n")])]),_("h3",[s._v("3.3. 反向引用")]),_("p",[s._v("除了使用相应 "),_("code",[s._v("API")]),s._v(" 来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。")]),_("p",[s._v("还是以日期为例。")]),_("p",[s._v("比如要写一个正则支持匹配如下三种格式：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-number"},[s._v("2016")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("06")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("12")]),s._v("\n"),_("span",{staticClass:"hljs-number"},[s._v("2016")]),s._v("/"),_("span",{staticClass:"hljs-number"},[s._v("06")]),s._v("/"),_("span",{staticClass:"hljs-number"},[s._v("12")]),s._v("\n"),_("span",{staticClass:"hljs-number"},[s._v("2016.06")]),_("span",{staticClass:"hljs-number"},[s._v(".12")]),s._v("\n")])]),_("p",[s._v("最先可能想到的正则是:")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d{4}(-|\\/|\\.)\\d{2}(-|\\/|\\.)\\d{2}/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string1 = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string2 = "),_("span",{staticClass:"hljs-string"},[s._v('"2017/06/12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string3 = "),_("span",{staticClass:"hljs-string"},[s._v('"2017.06.12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string4 = "),_("span",{staticClass:"hljs-string"},[s._v('"2016-06/12"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string1) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string2) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string3) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string4) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n")])]),_("p",[s._v("其中 "),_("code",[s._v("/")]),s._v(" 和 "),_("code",[s._v(".")]),s._v(" 需要转义。虽然匹配了要求的情况，但也匹配 "),_("code",[s._v('"2016-06/12"')]),s._v(" 这样的数据。")]),_("p",[s._v("假设我们想要求分割符前后一致怎么办？此时需要使用反向引用：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d{4}(-|\\/|\\.)\\d{2}\\1\\d{2}/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string1 = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string2 = "),_("span",{staticClass:"hljs-string"},[s._v('"2017/06/12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string3 = "),_("span",{staticClass:"hljs-string"},[s._v('"2017.06.12"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string4 = "),_("span",{staticClass:"hljs-string"},[s._v('"2016-06/12"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string1) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string2) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string3) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string4) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false")]),s._v("\n")])]),_("p",[s._v("注意里面的 "),_("code",[s._v("\\1")]),s._v("，表示的引用之前的那个分组 "),_("code",[s._v("(-|\\/|\\.)")]),s._v("。不管它匹配到什么"),_("code",[s._v("（比如 -）")]),s._v("，"),_("code",[s._v("\\1")]),s._v(" 都匹配那个同 样的具体某个字符。")]),_("p",[s._v("我们知道了 "),_("code",[s._v("\\1")]),s._v(" 的含义后，那么 "),_("code",[s._v("\\2")]),s._v(" 和 "),_("code",[s._v("\\3")]),s._v(" 的概念也就理解了，即分别指代第二个和第三个分组。")]),_("p",[s._v("看到这里，此时，恐怕你会有几个问题。")]),_("h4",[s._v("3.3.1. 括号嵌套怎么办？")]),_("p",[s._v("以左括号（开括号）为准。比如：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^((\\d)(\\d(\\d)))\\1\\2\\3\\4$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"1231231233"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$1")]),s._v(" ); "),_("span",{staticClass:"hljs-comment"},[s._v("// 123")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$2")]),s._v(" ); "),_("span",{staticClass:"hljs-comment"},[s._v("// 1")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$3")]),s._v(" ); "),_("span",{staticClass:"hljs-comment"},[s._v("// 23")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$4")]),s._v(" ); "),_("span",{staticClass:"hljs-comment"},[s._v("// 3")]),s._v("\n")])]),_("p",[s._v("我们可以看看这个正则匹配模式：")]),_("p",[s._v("第一个字符是数字，比如说 "),_("code",[s._v('"1"')]),s._v("，")]),_("p",[s._v("第二个字符是数字，比如说 "),_("code",[s._v('"2"')]),s._v("，")]),_("p",[s._v("第三个字符是数字，比如说 "),_("code",[s._v('"3"')]),s._v("，")]),_("p",[s._v("接下来的是 "),_("code",[s._v("\\1")]),s._v("，是第一个分组内容，那么看第一个开括号对应的分组是什么，是 "),_("code",[s._v('"123"')]),s._v("，")]),_("p",[s._v("接下来的是 "),_("code",[s._v("\\2")]),s._v("，找到第2个开括号，对应的分组，匹配的内容是 "),_("code",[s._v('"1"')]),s._v("，")]),_("p",[s._v("接下来的是 "),_("code",[s._v("\\3")]),s._v("，找到第3个开括号，对应的分组，匹配的内容是 "),_("code",[s._v('"23"')]),s._v("，")]),_("p",[s._v("最后的是 "),_("code",[s._v("\\4")]),s._v("，找到第3个开括号，对应的分组，匹配的内容是 "),_("code",[s._v('"3"')]),s._v("。")]),_("p",[s._v("我们可以看看这个正则匹配模式：")]),_("p",[s._v("第一个字符是数字，比如说 "),_("code",[s._v('"1"')]),s._v("，")]),_("p",[s._v("第二个字符是数字，比如说 "),_("code",[s._v('"2"')]),s._v("，")]),_("p",[s._v("第三个字符是数字，比如说 "),_("code",[s._v('"3"')]),s._v("，")]),_("p",[s._v("接下来的是 "),_("code",[s._v("\\1")]),s._v("，是第一个分组内容，那么看第一个开括号对应的分组是什么，是 "),_("code",[s._v('"123"，')])]),_("p",[s._v("接下来的是 "),_("code",[s._v("\\2")]),s._v("，找到第2个开括号，对应的分组，匹配的内容是 "),_("code",[s._v('"1"')]),s._v("，")]),_("p",[s._v("接下来的是 "),_("code",[s._v("\\3")]),s._v("，找到第3个开括号，对应的分组，匹配的内容是 "),_("code",[s._v('"23"')]),s._v("，")]),_("p",[s._v("最后的是 "),_("code",[s._v("\\4")]),s._v("，找到第3个开括号，对应的分组，匹配的内容是 "),_("code",[s._v('"3"')]),s._v("。")]),_("h4",[s._v("3.3.2. "),_("code",[s._v("\\10")]),s._v(" 表示什么呢？")]),_("p",[s._v("另外一个疑问可能是，即 "),_("code",[s._v("\\10")]),s._v(" 是表示第 "),_("code",[s._v("10")]),s._v(" 个分组，还是 "),_("code",[s._v("\\1")]),s._v(" 和 "),_("code",[s._v("0")]),s._v(" 呢？")]),_("p",[s._v("答案是前者，虽然一个正则里出现 "),_("code",[s._v("\\10")]),s._v(" 比较罕见。测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \\10+/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"123456789# ######"')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("TIP 如果真要匹配 "),_("code",[s._v("\\1")]),s._v(" 和 "),_("code",[s._v("0")]),s._v(" 的话，请使用 "),_("code",[s._v("(?:\\1)0")]),s._v(" 或者 "),_("code",[s._v("\\1(?:0)")]),s._v("。")]),_("h4",[s._v("3.3.3. 引用不存在的分组会怎样？")]),_("p",[s._v("因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如 "),_("code",[s._v("\\2")]),s._v("，就匹配 "),_("code",[s._v('"\\2"')]),s._v("。注意 "),_("code",[s._v('"\\2"')]),s._v(" 表示对 "),_("code",[s._v('"2"')]),s._v(" 进行了转义。")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\1\\2\\3\\4\\5\\6\\7\\8\\9/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"\\1\\2\\3\\4\\5\\6\\7\\8\\9"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-string"},[s._v('"\\1\\2\\3\\4\\5\\6\\7\\8\\9"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(") );\n")])]),_("p",[_("code",[s._v("Chrome")]),s._v(" 浏览器打印的结果（不同的浏览器和版本，打印的结果可能不一样）：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"80%"},attrs:{src:t("6fad")}}),_("h4",[s._v("3.3.4. 分组后面有量词会怎样？")]),_("p",[s._v("分组后面有量词的话，分组最终捕获到的数据是最后一次的匹配。比如如下的测试案例：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d)+/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"12345"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["12345", "5", index: 0, input: "12345"]')]),s._v("\n")])]),_("p",[s._v("从上面看出，分组 "),_("code",[s._v("(\\d)")]),s._v(" 捕获的数据是 "),_("code",[s._v('"5"')]),s._v("。")]),_("p",[s._v("同理对于反向引用，也是这样的。测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d)+ \\1/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"12345 1"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => false")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"12345 5"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("h3",[s._v("3.4. 非捕获括号")]),_("p",[s._v("之前文中出现的括号，都会捕获它们匹配到的数据，以便后续引用，因此也称它们是"),_("strong",[s._v("捕获型分组")]),s._v("和"),_("strong",[s._v("捕获型分支")]),s._v("。")]),_("p",[s._v("如果只想要括号最原始的功能，但不会引用它，即，既不在 "),_("code",[s._v("API")]),s._v(" 里引用，也不在正则里反向引用。")]),_("p",[s._v("此时可以使用非捕获括号 "),_("code",[s._v("(?:p)")]),s._v(" 和 "),_("code",[s._v("(?:p1|p2|p3)")]),s._v("，例如本章第一个例子可以修改为：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(?:ab)+/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"ababa abbb ababab"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["abab", "ab", "ababab"]')]),s._v("\n")])]),_("p",[s._v("同理，第二例子可以修改为：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^I love (?:JavaScript|Regular Expression)$/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"I love JavaScript"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"I love Regular Expression"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("h3",[s._v("3.5. 相关案例")]),_("p",[s._v("至此括号的作用已经讲完了，总结一句话，就是提供了可供我们使用的分组，如何用就看我们的了。")]),_("h4",[s._v("3.5.1. 字符串 "),_("code",[s._v("trim")]),s._v(" 方法模拟")]),_("p",[_("code",[s._v("trim")]),s._v(" 方法是去掉字符串的开头和结尾的空白符。有两种思路去做。")]),_("p",[s._v("第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("trim")]),s._v("("),_("span",{staticClass:"hljs-params"},[s._v("str")]),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/^\\s+|\\s+$/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("); }\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title function_"},[s._v("trim")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('" foobar "')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "foobar"')]),s._v("\n")])]),_("p",[s._v("第二种，匹配整个字符串，然后用引用来提取出相应的数据：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("trim")]),s._v(" (str) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/^\\s*(.*?)\\s*$/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('"$1"')]),s._v("); }\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title function_"},[s._v("trim")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('" foobar "')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "foobar"')]),s._v("\n")])]),_("p",[s._v("这里使用了惰性匹配 "),_("code",[s._v("*?")]),s._v("，不然也会匹配最后一个空格之前的所有空格的。")]),_("p",[s._v("当然，前者效率高。")]),_("h4",[s._v("3.5.2. 将每个单词的首字母转换为大写")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("titleize")]),s._v(" (str) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str."),_("span",{staticClass:"hljs-title function_"},[s._v("toLowerCase")]),s._v("()."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(?:^|\\s)\\w/g")]),s._v(", "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("c")]),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" c."),_("span",{staticClass:"hljs-title function_"},[s._v("toUpperCase")]),s._v("();\n  }); }\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title function_"},[s._v("titleize")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v("'my name is epeli'")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "My Name Is Epeli"')]),s._v("\n")])]),_("p",[s._v("思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。")]),_("h4",[s._v("3.5.3. 驼峰化")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("camelize")]),s._v(" (str) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/[-_\\s]+(.)?/g")]),s._v(", "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("match, c")]),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" c ? c."),_("span",{staticClass:"hljs-title function_"},[s._v("toUpperCase")]),s._v("() : "),_("span",{staticClass:"hljs-string"},[s._v("''")]),s._v(";\n  }); }\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title function_"},[s._v("camelize")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v("'-moz-transform'")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "MozTransform')]),s._v("\n")])]),_("p",[s._v("驼峰化的逆过程。")]),_("h4",[s._v("3.5.5. "),_("code",[s._v("HTML")]),s._v(" 转义和反转义")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-comment"},[s._v("// 将HTML特殊字符转换成等值的实体")]),s._v("\n"),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("escapeHTML")]),s._v(" (str) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" escapeChars = {\n  "),_("span",{staticClass:"hljs-string"},[s._v("'<'")]),s._v(" : "),_("span",{staticClass:"hljs-string"},[s._v("'lt'")]),s._v(",\n  "),_("span",{staticClass:"hljs-string"},[s._v("'>'")]),s._v(" : "),_("span",{staticClass:"hljs-string"},[s._v("'gt'")]),s._v(",\n  "),_("span",{staticClass:"hljs-string"},[s._v("'\"'")]),s._v(" : "),_("span",{staticClass:"hljs-string"},[s._v("'quot'")]),s._v(",\n  "),_("span",{staticClass:"hljs-string"},[s._v("'&'")]),s._v(" : "),_("span",{staticClass:"hljs-string"},[s._v("'amp'")]),s._v(",\n  "),_("span",{staticClass:"hljs-string"},[s._v("'\\''")]),s._v(" : "),_("span",{staticClass:"hljs-string"},[s._v("'#39'")]),s._v("\n  };\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v("'['")]),s._v(" + "),_("span",{staticClass:"hljs-title class_"},[s._v("Object")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("keys")]),s._v("(escapeChars)."),_("span",{staticClass:"hljs-title function_"},[s._v("join")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v("''")]),s._v(") +"),_("span",{staticClass:"hljs-string"},[s._v("']'")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v("'g'")]),s._v("),\n"),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("match")]),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),_("span",{staticClass:"hljs-string"},[s._v("'&'")]),s._v(" + escapeChars[match] + "),_("span",{staticClass:"hljs-string"},[s._v("';'")]),s._v(";\n  }); }\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( escapeHTML("),_("span",{staticClass:"hljs-string"},[s._v("'<div>Blah blah blah</div>'")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "&lt;div&gt;Blah blah blah&lt;/div&gt";')]),s._v("\n")])]),_("p",[s._v("其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。")]),_("p",[s._v("倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-comment"},[s._v("// 实体字符转换为等值的HTML。")]),s._v("\n"),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("unescapeHTML")]),s._v(" (str) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" htmlEntities = {\n  "),_("span",{staticClass:"hljs-attr"},[s._v("nbsp")]),s._v(": "),_("span",{staticClass:"hljs-string"},[s._v("' '")]),s._v(",\n  "),_("span",{staticClass:"hljs-attr"},[s._v("lt")]),s._v(": "),_("span",{staticClass:"hljs-string"},[s._v("'<'")]),s._v(",\n  "),_("span",{staticClass:"hljs-attr"},[s._v("gt")]),s._v(": "),_("span",{staticClass:"hljs-string"},[s._v("'>'")]),s._v(",\n  "),_("span",{staticClass:"hljs-attr"},[s._v("quot")]),s._v(": "),_("span",{staticClass:"hljs-string"},[s._v("'\"'")]),s._v(",\n  "),_("span",{staticClass:"hljs-attr"},[s._v("amp")]),s._v(": "),_("span",{staticClass:"hljs-string"},[s._v("'&'")]),s._v(",\n  "),_("span",{staticClass:"hljs-attr"},[s._v("apos")]),s._v(": "),_("span",{staticClass:"hljs-string"},[s._v("'\\''")]),s._v("\n  };\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/\\&([^;]+);/g")]),s._v(", "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("match, key")]),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (key "),_("span",{staticClass:"hljs-keyword"},[s._v("in")]),s._v(" htmlEntities) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" htmlEntities[key];\n  }\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" match;\n  }); }\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( unescapeHTML("),_("span",{staticClass:"hljs-string"},[s._v("'&lt;div&gt;Blah blah blah&lt;/div&gt;'")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "<div>Blah blah blah</div>"')]),s._v("\n")])]),_("p",[s._v("通过 "),_("code",[s._v("key")]),s._v(" 获取相应的分组引用，然后作为对象的键。")]),_("h4",[s._v("3.5.6. 匹配成对标签")]),_("p",[s._v("要求匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("<title>regular expression</title>\n"),_("span",{staticClass:"language-xml"},[_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("p")]),s._v(">")]),s._v("laoyao bye bye"),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("p")]),s._v(">")])]),s._v("\n")])]),_("p",[s._v("不匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("<title>wrong!</p>\n")])]),_("p",[s._v("匹配一个开标签，可以使用正则 "),_("code",[s._v("<[^>]+>")]),s._v("，")]),_("p",[s._v("匹配一个闭标签，可以使用 "),_("code",[s._v("<\\/[^>]+>")]),s._v("，")]),_("p",[s._v("但是要求匹配成对标签，那就需要使用反向引用，如：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/<([^>]+)>[\\d\\D]*<\\/\\1>/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string1 = "),_("span",{staticClass:"hljs-string"},[s._v('"<title>regular expression</title>"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string2 = "),_("span",{staticClass:"hljs-string"},[s._v('"<p>laoyao bye bye</p>"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string3 = "),_("span",{staticClass:"hljs-string"},[s._v('"<title>wrong!</p>"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string1) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string2) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string3) ); "),_("span",{staticClass:"hljs-comment"},[s._v("// false")]),s._v("\n")])]),_("p",[s._v("其中开标签 "),_("code",[s._v("<[\\^>]+>")]),s._v(" 改成 "),_("code",[s._v("<([^>]+)>")]),s._v("，使用括号的目的是为了后面使用"),_("strong",[s._v("反向引用")]),s._v("，而提供分组。")]),_("p",[s._v("闭标签使用了反向引用，"),_("code",[s._v("<\\/\\1>")]),s._v("。")]),_("p",[s._v("另外，"),_("code",[s._v("[\\d\\D]")]),s._v("的意思是，这个字符是"),_("strong",[s._v("数字或者不是数字")]),s._v("，因此，也就是匹配任意字符的意思。")]),_("h3",[s._v("3.6 本章小结")]),_("p",[s._v("重点理解括号可以提供分组，我们可以提取数据，应该就可以了。")]),_("h2",[s._v("4. 第四章 正则表达式回溯法原理")]),_("p",[s._v("学习正则表达式，是需要懂点儿匹配原理的。")]),_("p",[s._v("而研究匹配原理时，有两个字出现的频率比较高：“回溯”。")]),_("p",[s._v("听起来挺高大上，事实上却是一个比较容易理解的概念。")]),_("p",[s._v("因此，本章就简单扼要地说清楚回溯到底是什么东西。")]),_("p",[s._v("内容包括：")]),_("p",[_("strong",[s._v("没有回溯的匹配")])]),_("p",[_("strong",[s._v("有回溯的匹配")])]),_("p",[_("strong",[s._v("常见的回溯形式")])]),_("h3",[s._v("4.1. 没有回溯的匹配")]),_("p",[s._v("假设我们的正则是 "),_("code",[s._v("/ab{1,3}c/")]),s._v("，其可视化形式是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("863d")}}),_("p",[s._v("而当目标字符串是 "),_("code",[s._v('"abbbc"')]),s._v(" 时，就没有所谓的“回溯”。其匹配过程是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("2d1d")}}),_("p",[s._v("其中子表达式 "),_("code",[s._v("b{1,3}")]),s._v(" 表示 "),_("code",[s._v('"b"')]),s._v(" 字符连续出现 "),_("code",[s._v("1")]),s._v(" 到 "),_("code",[s._v("3")]),s._v(" 次。")]),_("h3",[s._v("4.2. 有回溯的匹配")]),_("p",[s._v("如果目标字符串是"),_("code",[s._v('"abbc"')]),s._v("，中间就有回溯。")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("48a2")}}),_("p",[s._v("图中第 "),_("code",[s._v("5")]),s._v(" 步有红颜色，表示匹配不成功。此时 "),_("code",[s._v("b{1,3}")]),s._v(" 已经匹配到了 "),_("code",[s._v("2")]),s._v(" 个字符 "),_("code",[s._v('"b"')]),s._v("，准备尝试第三个时，")]),_("p",[s._v("结果发现接下来的字符是 "),_("code",[s._v('"c"')]),s._v("。那么就认为 "),_("code",[s._v("b{1,3}")]),s._v(" 就已经匹配完毕。然后状态又回到之前的状态（即 第 "),_("code",[s._v("6")]),s._v(" 步与第 "),_("code",[s._v("4")]),s._v(" 步一样），")]),_("p",[s._v("最后再用子表达式 "),_("code",[s._v("c")]),s._v("，去匹配字符 "),_("code",[s._v('"c"')]),s._v("。当然，此时整个表达式匹配成功了。")]),_("p",[s._v("图中的第 "),_("code",[s._v("6")]),s._v(" 步，就是"),_("code",[s._v("“回溯”")]),s._v("。")]),_("p",[s._v("你可能对此没有感觉，这里我们再举一个例子。正则是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("5925")}}),_("p",[s._v("目标字符串是"),_("code",[s._v('"abbbc"')]),s._v("，匹配过程是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("a284")}}),_("p",[s._v("其中第 "),_("code",[s._v("7")]),s._v(" 步和第 "),_("code",[s._v("10")]),s._v(" 步是回溯。第 "),_("code",[s._v("7")]),s._v(" 步与第 "),_("code",[s._v("4")]),s._v(" 步一样，此时 "),_("code",[s._v("b{1,3}")]),s._v(" 匹配了两个 "),_("code",[s._v('"b"')]),s._v("，")]),_("p",[s._v("而第 "),_("code",[s._v("10")]),s._v(" 步与 第 "),_("code",[s._v("3")]),s._v(" 步一样，此时 "),_("code",[s._v("b{1,3}")]),s._v(" 只匹配了一个 "),_("code",[s._v('"b"')]),s._v("，这也是 "),_("code",[s._v("b{1,3}")]),s._v(" 的最终匹配结果。")]),_("p",[s._v("这里再看一个清晰的回溯，正则是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("3d51")}}),_("p",[s._v("目标字符串是："),_("code",[s._v('"abc"de')]),s._v("，匹配过程是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("369c")}}),_("p",[s._v("图中省略了尝试匹配双引号失败的过程。可以看出 "),_("code",[s._v(".*")]),s._v(" 是非常影响效率的。")]),_("p",[s._v("为了减少一些不必要的回溯，可以把正则修改为 "),_("code",[s._v('/"[^"]*"/。')])]),_("h3",[s._v("4.3. 常见的回溯形式")]),_("p",[s._v("正则表达式匹配字符串的这种方式，有个学名，叫"),_("strong",[s._v("回溯法")]),s._v("。")]),_("blockquote",[_("p",[s._v("回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、 不断“回溯”寻找解的方法，就称作“回溯法”。 — 百度百科")])]),_("p",[s._v("本质上就是"),_("strong",[s._v("深度优先搜索算法")]),s._v("。其中退到之前的某一步这一过程，我们称为"),_("code",[s._v("“回溯”")]),s._v("。从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，尝试匹配失败时，接下来的一步通常就是回溯。")]),_("p",[s._v("道理，我们是懂了。那么 "),_("code",[s._v("JavaScript")]),s._v(" 中正则表达式会产生回溯的地方都有哪些呢？")]),_("h4",[s._v("4.3.1 贪婪量词")]),_("p",[s._v("之前的例子都是贪婪量词相关的。比如 "),_("code",[s._v("b{1,3}")]),s._v("，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝 试。")]),_("p",[s._v("首先会尝试 "),_("code",[s._v('"bbb"')]),s._v("，然后再看整个正则是否能匹配。不能匹配时，吐出一个 "),_("code",[s._v('"b"')]),s._v("，即在 "),_("code",[s._v('"bb"')]),s._v(" 的基础上，再继续尝试。")]),_("p",[s._v("如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。")]),_("p",[s._v("虽然局部匹配是贪婪的，但也要满足整体能正确匹配。否则，皮之不存，毛将焉附？")]),_("p",[s._v("此时我们不禁会问，如果当多个贪婪量词挨着存在，并相互有冲突时，此时会是怎样？")]),_("p",[s._v("答案是，先下手为强！因为深度优先搜索。测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"12345"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{1,3})(\\d{1,3})/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["12345", "123", "45", index: 0, input: "12345"]')]),s._v("\n")])]),_("p",[s._v("其中，前面的 "),_("code",[s._v("\\d{1,3}")]),s._v(" 匹配的是 "),_("code",[s._v('"123"')]),s._v("，后面的 "),_("code",[s._v("\\d{1,3}")]),s._v(" 匹配的是 "),_("code",[s._v('"45"')]),s._v("。")]),_("h4",[s._v("4.3.2 惰性量词")]),_("p",[s._v("惰性量词就是在贪婪量词后面加个问号。表示"),_("strong",[s._v("尽可能少的匹配")]),s._v("，比如：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"12345"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d{1,3}?)(\\d{1,3})/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["1234", "1", "234", index: 0, input: "12345"]')]),s._v("\n")])]),_("p",[s._v("其中 "),_("code",[s._v("\\d{1,3}?")]),s._v(" 只匹配到一个字符 "),_("code",[s._v('"1"')]),s._v("，而后面的 "),_("code",[s._v("\\d{1,3}")]),s._v(" 匹配了 "),_("code",[s._v('"234"')]),s._v("。")]),_("p",[_("strong",[s._v("虽然惰性量词不贪，但也会有回溯的现象")]),s._v("。比如正则是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("0493")}}),_("p",[s._v("目标字符串是 "),_("code",[s._v('"12345"')]),s._v("，匹配过程是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("a896")}}),_("p",[s._v("知道你不贪、很知足，但是为了整体匹配成，没办法，也只能给你多塞点了。因此最后 "),_("code",[s._v("\\d{1,3}?")]),s._v(" 匹配的字 符是 "),_("code",[s._v('"12"')]),s._v("，是两个数字，而不是一个。")]),_("h4",[s._v("4.3.3 分支结构")]),_("p",[s._v("我们知道分支也是惰性的，比如 "),_("code",[s._v("/can|candy/")]),s._v("，去匹配字符串 "),_("code",[s._v('"candy"')]),s._v("，得到的结果是 "),_("code",[s._v('"can"')]),s._v("，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。")]),_("p",[_("strong",[s._v("分支结构")]),s._v("，可能前面的"),_("strong",[s._v("子模式")]),s._v("会形成了"),_("strong",[s._v("局部匹配")]),s._v("，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。")]),_("p",[s._v("比如正则：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("478b")}}),_("p",[s._v("目标字符串是 "),_("code",[s._v('"candy"')]),s._v("，匹配过程：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("304d")}}),_("p",[s._v("上面第 "),_("code",[s._v("5")]),s._v(" 步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是 一种回溯的。")]),_("h3",[s._v("4.4. 本章小结")]),_("p",[s._v("其实回溯法，很容易掌握的。")]),_("p",[s._v("简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了；要么最 后都试完后，发现整体匹配不成功。")]),_("p",[s._v("贪婪量词“试”的策略是："),_("strong",[s._v("买衣服砍价")]),s._v("。价钱太高了，便宜点，不行，再便宜点。")]),_("p",[s._v("惰性量词“试”的策略是："),_("strong",[s._v("卖东西加价")]),s._v("。给少了，再多给点行不，还有点少啊，再给点。")]),_("p",[s._v("分支结构“试”的策略是："),_("strong",[s._v("货比三家")]),s._v("。这家不行，换一家吧，还不行，再换。")]),_("p",[s._v("既然有"),_("strong",[s._v("回溯")]),s._v("的过程，那么"),_("strong",[s._v("匹配效率肯定低一些")]),s._v("。相对谁呢？相对那些 "),_("code",[s._v("DFA")]),s._v(" 引擎, "),_("code",[s._v("DFA")]),s._v(" 是“确定型有限自动 机”的简写。")]),_("p",[s._v("而 "),_("code",[s._v("JavaScript")]),s._v(" 的正则引擎是 "),_("code",[s._v("NFA，NFA")]),s._v(" 是“非确定型有限自动机”的简写。")]),_("p",[s._v("大部分语言中的正则都是 "),_("code",[s._v("NFA")]),s._v("，为啥它这么流行呢？")]),_("p",[s._v("答：你别看我匹配慢，但是我编译快啊，而且我还有趣哦。")]),_("h2",[s._v("5. 第五章 正则表达式的拆分")]),_("p",[s._v("对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。")]),_("p",[s._v("不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。")]),_("p",[s._v("正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。")]),_("p",[s._v("如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。")]),_("p",[s._v("本章就解决这一问题，内容包括：")]),_("p",[s._v("结构和操作符")]),_("p",[s._v("注意要点")]),_("p",[s._v("案例分析")]),_("h3",[s._v("5.1. 结构和操作符")]),_("p",[s._v("编程语言一般都有操作符。只要有操作符，就会出现一个问题。当一大堆操作在一起时，先操作谁，又后操作谁呢？为了不产生歧义，就需要语言本身定义好操作顺序，即所谓的优先级。")]),_("p",[s._v("而在正则表达式中，操作符都体现在结构中，即由"),_("strong",[s._v("特殊字符")]),s._v("和"),_("strong",[s._v("普通字符")]),s._v("所代表的一个个特殊整体。")]),_("p",[_("code",[s._v("JavaScript")]),s._v(" 正则表达式中，都有哪些结构呢？")]),_("p",[_("strong",[s._v("字符字面量")]),s._v("、"),_("strong",[s._v("字符组")]),s._v("、"),_("strong",[s._v("量词")]),s._v("、"),_("strong",[s._v("锚")]),s._v("、"),_("strong",[s._v("分组")]),s._v("、"),_("strong",[s._v("选择分支")]),s._v("、"),_("strong",[s._v("反向引用")]),s._v("。")]),_("p",[s._v("具体含义简要回顾如下：")]),_("table",[_("thead",[_("tr",[_("th",[s._v("结构")]),_("th",[s._v("说明")])])]),_("tbody",[_("tr",[_("td",[s._v("字面量")]),_("td",[s._v("匹配一个具体字符，包括"),_("strong",[s._v("不用转义的和需要转义")]),s._v("的。比如 "),_("code",[s._v("a")]),s._v(" 匹配字符 "),_("code",[s._v('"a"')]),s._v("， 又比如 "),_("code",[s._v("\\n")]),s._v(" 匹配"),_("strong",[s._v("换行符")]),s._v("，又比如 "),_("code",[s._v("\\.")]),s._v(" 匹配"),_("strong",[s._v("小数点")]),s._v("。")])]),_("tr",[_("td",[s._v("字符组")]),_("td",[s._v("匹配一个字符，可以是多种可能之一，比如 "),_("code",[s._v("[0-9]")]),s._v("，表示"),_("strong",[s._v("匹配一个数字")]),s._v("。也有 "),_("code",[s._v("\\d")]),s._v(" 的简写形式。另外还有"),_("strong",[s._v("反义字符组")]),s._v("，表示可以是除了特定字符之外任何一个字符，比如 "),_("code",[s._v("[^0-9]")]),s._v("， 表示一个"),_("strong",[s._v("非数字字符")]),s._v("，也有 "),_("code",[s._v("\\D")]),s._v(" 的简写形式。")])]),_("tr",[_("td",[s._v("量词")]),_("td",[s._v("表示一个字符连续出现，比如 "),_("code",[s._v("a{1,3}")]),s._v(" 表示 "),_("code",[s._v('"a"')]),s._v(" 字符连续出现 "),_("code",[s._v("3")]),s._v(" 次。另外还有常见的简写形式，比如 "),_("code",[s._v("a+")]),s._v(" 表示 "),_("code",[s._v('"a"')]),s._v(" 字符连续出现至少一次。")])]),_("tr",[_("td",[s._v("锚")]),_("td",[s._v("匹配一个位置，"),_("strong",[s._v("而不是字符")]),s._v("。比如 "),_("code",[s._v("^")]),s._v(" 匹配字符串的开头，又比如 "),_("code",[s._v("\\b")]),s._v(" 匹配"),_("strong",[s._v("单词边界")]),s._v("， 又比如 "),_("code",[s._v("(?=\\d)")]),s._v(" 表示"),_("strong",[s._v("数字前面的位置")]),s._v("。")])]),_("tr",[_("td",[s._v("分组")]),_("td",[s._v("用括号表示一个整体，比如 "),_("code",[s._v("(ab)+")]),s._v("，表示 "),_("code",[s._v('"ab"')]),s._v(" 两个字符连续出现多次，也可以使用非捕获分组 "),_("code",[s._v("(?:ab)+")]),s._v("。")])]),_("tr",[_("td",[s._v("分支")]),_("td",[s._v("多个子表达式多选一，比如 "),_("code",[s._v("abc|bcd")]),s._v("，表达式匹配 "),_("code",[s._v('"abc" ')]),s._v("或者 "),_("code",[s._v('"bcd"')]),s._v(" 字符子串。 "),_("strong",[s._v("反向引用")]),s._v("，比如 "),_("code",[s._v("\\2")]),s._v("，表示引用第 "),_("code",[s._v("2")]),s._v(" 个分组。")])])])]),_("p",[s._v("其中涉及到的操作符有：")]),_("table",[_("thead",[_("tr",[_("th",[s._v("操作符描述")]),_("th",[s._v("操作符")]),_("th",[s._v("优先级")])])]),_("tbody",[_("tr",[_("td",[_("strong",[s._v("转义符")])]),_("td",[_("code",[s._v("\\")])]),_("td",[_("code",[s._v("1")])])]),_("tr",[_("td",[_("strong",[s._v("括号和方括号")])]),_("td",[_("code",[s._v("(…)、(?:…)、(?=…)、(?!…)、[…]")])]),_("td",[_("code",[s._v("2")])])]),_("tr",[_("td",[_("strong",[s._v("量词限定符")])]),_("td",[_("code",[s._v(" {m}、{m,n}、{m,}、?、*、+")])]),_("td",[_("code",[s._v("3")])])]),_("tr",[_("td",[_("strong",[s._v("位置和序列")])]),_("td",[_("code",[s._v("^、$、\\元字符、一般字符")])]),_("td",[_("code",[s._v("4")])])]),_("tr",[_("td",[_("strong",[s._v("管道符（竖杠）")])]),_("td",[_("code",[s._v("|")])]),_("td",[_("code",[s._v("5")])])])])]),_("p",[s._v("上面操作符的优先级从上至下，由高到低。")]),_("p",[s._v("这里，我们来分析一个正则：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/ab?(c|de*)+|fg/\n")])]),_("p",[s._v("由于括号的存在，所以，"),_("code",[s._v("(c|de*)")]),s._v(" 是一个整体结构。")]),_("p",[s._v("在 "),_("code",[s._v("(c|de*)")]),s._v(" 中，注意其中的量词 ，因此 "),_("code",[s._v("e")]),s._v(" 是一个整体结构。")]),_("p",[s._v("又因为分支结构 "),_("code",[s._v("|")]),s._v(" 优先级最低，因此 "),_("code",[s._v("c")]),s._v(" 是一个整体、而 "),_("code",[s._v("de*")]),s._v(" 是另一个整体。")]),_("p",[s._v("同理，整个正则分成了 "),_("code",[s._v("a、b?、(…)+、f、g")]),s._v("。而由于分支的原因， 又可以分成 "),_("code",[s._v("ab?(c|de*)+")]),s._v(" 和 "),_("code",[s._v("fg")]),s._v(" 这两部分。")]),_("p",[s._v("希望你没被我绕晕，上面的分析可用其可视化形式描述如下：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"80%"},attrs:{src:t("63ab")}}),_("h3",[s._v("5.2. 注意要点")]),_("p",[s._v("关于结构和操作符，还是有几点需要强调：")]),_("h4",[s._v("5.2.1 匹配字符串整体问题")]),_("p",[s._v("因为是要匹配整个字符串，我们经常会在正则前后中加上锚 "),_("code",[s._v("^")]),s._v(" 和 "),_("code",[s._v("$")]),s._v("。")]),_("p",[s._v("比如要匹配目标字符串 "),_("code",[s._v('"abc"')]),s._v(" 或者 "),_("code",[s._v('"bcd"')]),s._v(" 时，如果一不小心，就会写成 "),_("code",[s._v("/^abc|bcd$/")]),s._v("。")]),_("p",[s._v("而位置字符和字符序列优先级要比竖杠高，故其匹配的结构是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"50%"},attrs:{src:t("57fc")}}),_("h4",[s._v("5.2.2 量词连缀问题")]),_("p",[s._v("假设，要匹配这样的字符串：")]),_("ol",[_("li",[s._v("每个字符为 "),_("code",[s._v('"a、"b"、"c"')]),s._v(" 任选其一，")]),_("li",[s._v("字符串的长度是 "),_("code",[s._v("3")]),s._v(" 的倍数。")])]),_("p",[s._v("此时正则不能想当然地写成 "),_("code",[s._v("/^[abc]{3}+$/")]),s._v("，这样会报错，说 "),_("code",[s._v("+")]),s._v(" 前面没什么可重复的：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"80%"},attrs:{src:t("6164")}}),_("p",[s._v("此时要修改成：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"50%"},attrs:{src:t("804c")}}),_("h4",[s._v("5.2.3 元字符转义问题")]),_("p",[s._v("所谓元字符，就是正则中有特殊含义的字符。")]),_("p",[s._v("所有结构里，用到的元字符总结如下：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("^、$、.、*、+、?、|、\\、/、(、)、[、]、{、}、=、!、:、- ,\n")])]),_("p",[s._v("当匹配上面的字符本身时，可以一律转义：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"^$.*+?|\\\\/[]{}=!:-,"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("其中 "),_("code",[s._v("string")]),s._v(" 中的 "),_("code",[s._v("\\")]),s._v(" 字符也要转义的。")]),_("p",[s._v("另外，在 "),_("code",[s._v("string")]),s._v(" 中，也可以把每个字符转义，当然，转义后的结果仍是本身：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"^$.*+?|\\\\/[]{}=!:-,"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string2 = "),_("span",{staticClass:"hljs-string"},[s._v('"\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string == string2 );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("现在的问题是，是不是每个字符都需要转义呢？否，看情况。")]),_("h5",[s._v("5.2.3.1. 字符组中的元字符")]),_("p",[s._v("跟字符组相关的元字符有 "),_("code",[s._v("[、]、^、-")]),s._v("。因此在会引起歧义的地方进行转义。例如开头的 "),_("code",[s._v("^")]),s._v(" 必须转义，不然会把整个字符组，看成反义字符组。")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"^$.*+?|\\\\/[]{}=!:-,"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/[\\^$.*+?|\\\\/\\[\\]{}=!:\\-,]/g")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["^", "$", ".", "*", "+", "?", "|", "\\", "/", "[", "]", "{", "}", "=", "!", ":",')]),s._v("\n"),_("span",{staticClass:"hljs-string"},[s._v('"-"')]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('","')]),s._v("]\n")])]),_("h5",[s._v("5.2.3.2. 匹配 "),_("code",[s._v('"[abc]"')]),s._v(" 和 "),_("code",[s._v('"{3,5}"')])]),_("p",[s._v("我们知道 "),_("code",[s._v("[abc]")]),s._v('，是个字符组。如果要匹配字符串 "[abc]" 时，该怎么办？')]),_("p",[s._v("可以写成 "),_("code",[s._v("/\\[abc\\]/")]),s._v("，也可以写成 "),_("code",[s._v("/\\[abc]/")]),s._v("，测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"[abc]"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\[abc]/g")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex)["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("] );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "[abc]"')]),s._v("\n")])]),_("p",[s._v("只需要在第一个方括号转义即可，因为后面的方括号构不成字符组，正则不会引发歧义，自然不需要转义。")]),_("p",[s._v("同理，要匹配字符串 "),_("code",[s._v('"{3,5}"')]),s._v("，只需要把正则写成 "),_("code",[s._v("/\\{3,5}/")]),s._v(" 即可。")]),_("p",[s._v("另外，我们知道量词有简写形式 "),_("code",[s._v("{m,}")]),s._v("，却没有 "),_("code",[s._v("{,n}")]),s._v(" 的情况。虽然后者不构成量词的形式，但此时并不会报 错。当然，匹配的字符串也是 "),_("code",[s._v('"{,n}"')]),s._v("，测试如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"{,3}"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/{,3}/g")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex)["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("] );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "{,3}"')]),s._v("\n")])]),_("h5",[s._v("5.2.3.3. 其余情况")]),_("p",[s._v("比如 "),_("code",[s._v("=、!、:、-、,")]),s._v(" 等符号，只要不在特殊结构中，并不需要转义。")]),_("p",[s._v("但是，括号需要前后都转义的，如 "),_("code",[s._v("/\\(123\\)/")]),s._v("。 至于剩下的 "),_("code",[s._v("^、$、.、*、+、?、|、\\、/")]),s._v(" 等字符，只要不在字符组内，都需要转义的。")]),_("h3",[s._v("5.3. 案例分析")]),_("p",[s._v("接下来分析两个例子，一个简单的，一个复杂的。")]),_("h4",[s._v("5.3.1 身份证")]),_("p",[s._v("正则表达式是：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/^(\\d{"),_("span",{staticClass:"hljs-number"},[s._v("15")]),s._v("}|\\d{"),_("span",{staticClass:"hljs-number"},[s._v("17")]),s._v("}[\\dxX])$/\n")])]),_("p",[s._v("因为竖杠 "),_("code",[s._v("|")]),s._v(" 的优先级最低，所以正则分成了两部分 "),_("code",[s._v("\\d{15} 和 \\d{17}[\\dxX]。")])]),_("p",[_("code",[s._v("\\d{15}")]),s._v(" 表示 "),_("code",[s._v("15")]),s._v(" 位连续数字。")]),_("p",[_("code",[s._v("\\d{17}[\\dxX]")]),s._v(" 表示 "),_("code",[s._v("17")]),s._v(" 位连续数字，最后一位可以是数字，可以大小写字母 "),_("code",[s._v('"x"。')])]),_("p",[s._v("可视化如下：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("0607")}}),_("h4",[s._v("5.3.2 IPV4 地址")]),_("p",[s._v("正则表达式是：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/^(("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("{"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}\\d|"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("?\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}|"),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}|"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("4")]),s._v("]\\d|"),_("span",{staticClass:"hljs-number"},[s._v("25")]),s._v("["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("])\\.){"),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("{"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}\\d|"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("?\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}|"),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}|"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("4")]),s._v("]\\d|"),_("span",{staticClass:"hljs-number"},[s._v("25")]),s._v("["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("])$/\n")])]),_("p",[s._v("这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("((…)\\.){"),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}(…)\n")])]),_("p",[s._v("其中，两个 "),_("code",[s._v("(…)")]),s._v(" 是一样的结构。表示匹配的是 "),_("code",[s._v("3")]),s._v(" 位数字。因此整个结构是")]),_("p",[s._v("3位数.3位数.3位数.3位数")]),_("p",[s._v("然后再来分析 "),_("code",[s._v("(…)：")])]),_("pre",{staticClass:"hljs"},[_("code",[s._v("("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("{"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}\\d|"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("?\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}|"),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("}|"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("4")]),s._v("]\\d|"),_("span",{staticClass:"hljs-number"},[s._v("25")]),s._v("["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("])\n")])]),_("p",[s._v("它是一个多选结构，分成"),_("code",[s._v("5")]),s._v("个部分：")]),_("p",[_("code",[s._v("0{0,2}\\d")]),s._v("，匹配一位数，包括 "),_("code",[s._v('"0"')]),s._v(" 补齐的。比如，"),_("code",[s._v('"9"、"09"、"009"；')])]),_("p",[_("code",[s._v("0?\\d{2}")]),s._v("，匹配两位数，包括 "),_("code",[s._v('"0"')]),s._v(" 补齐的，也包括一位数；")]),_("p",[_("code",[s._v("1\\d{2}")]),s._v("，匹配 "),_("code",[s._v('"100" 到 "199";')])]),_("p",[_("code",[s._v("2[0-4]\\d")]),s._v("，匹配 "),_("code",[s._v('"200" 到 "249"；')])]),_("p",[_("code",[s._v("25[0-5]")]),s._v("，匹配 "),_("code",[s._v('"250" 到 "255"。')])]),_("p",[s._v("最后来看一下其可视化形式：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"80%"},attrs:{src:t("efc8")}}),_("h3",[s._v("5.4. 本章小结")]),_("p",[s._v("掌握正则表达式中的优先级后，再看任何正则应该都有信心分析下去了。")]),_("p",[s._v("至于例子，不一而足，没有写太多。")]),_("p",[s._v("这里稍微总结一下，竖杠的优先级最低，即最后运算。 只要知道这一点，就能读懂大部分正则。")]),_("p",[s._v("另外关于元字符转义问题，当自己不确定与否时，尽管去转义，总之是不会错的。")]),_("h2",[s._v("6. 第六章 正则表达式的构建")]),_("p",[s._v("对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。")]),_("p",[s._v("不仅要看懂别人的解决方案，也要能独立地解决问题。代码是这样，正则表达式也是这样。 与“读”相比，“写”往往更为重要，这个道理是不言而喻的。")]),_("p",[s._v("对正则的运用，首重就是：如何针对问题，构建一个合适的正则表达式？")]),_("p",[s._v("本章就解决该问题，内容包括：")]),_("p",[_("strong",[s._v("平衡法则")])]),_("p",[_("strong",[s._v("构建正则前提")])]),_("p",[_("strong",[s._v("准确性")])]),_("p",[_("strong",[s._v("效率")])]),_("h3",[s._v("6.1. 平衡法则")]),_("p",[s._v("构建正则有一点非常重要，需要做到下面几点的平衡：")]),_("p",[_("strong",[s._v("匹配预期的字符串")])]),_("p",[_("strong",[s._v("不匹配非预期的字符串")])]),_("p",[_("strong",[s._v("可读性和可维护性")])]),_("p",[_("strong",[s._v("效率")])]),_("h3",[s._v("6.2. 构建正则前提")]),_("h4",[s._v("6.2.1. 是否能使用正则？")]),_("p",[s._v("正则太强大了，以至于我们随便遇到一个操作字符串问题时，都会下意识地去想，用正则该怎么做。但我们始终要提醒自己，正则虽然强大，但不是万能的，很多看似很简单的事情，还是做不到的。")]),_("p",[s._v("比如匹配这样的字符串："),_("code",[s._v("1010010001…。")])]),_("p",[s._v("虽然很有规律，但是只靠正则就是无能为力。")]),_("h4",[s._v("6.2.2. 是否有必要使用正则？")]),_("p",[s._v("要认识到正则的局限，不要去研究根本无法完成的任务。同时，也不能走入另一个极端：无所不用正则。能用字符串 "),_("code",[s._v("API")]),s._v(" 解决的简单问题，就不该正则出马。")]),_("p",[s._v("比如，从日期中提取出年月日，虽然可以使用正则：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-07-01"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^(\\d{4})-(\\d{2})-(\\d{2})/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017-07-01", "2017", "07", "01", index: 0, input: "2017-07-01"]')]),s._v("\n")])]),_("p",[s._v("其实，可以使用字符串的 "),_("code",[s._v("split")]),s._v(" 方法来做，即可：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-07-01"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = string."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"-"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( result );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "07", "01"]')]),s._v("\n")])]),_("p",[s._v("比如，判断是否有问号，虽然可以使用：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"?id=xx&act=search"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("search")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/\\?/")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 0")]),s._v("\n")])]),_("p",[s._v("其实，可以使用字符串的 "),_("code",[s._v("indexOf")]),s._v(" 方法：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"?id=xx&act=search"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("indexOf")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"?"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 0")]),s._v("\n")])]),_("p",[s._v("比如获取子串，虽然可以使用正则：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"JavaScript"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/.{4}(.+)/")]),s._v(")["),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("] );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => Script")]),s._v("\n")])]),_("p",[s._v("其实，可以直接使用字符串的 "),_("code",[s._v("substring")]),s._v(" 或 "),_("code",[s._v("substr")]),s._v(" 方法来做：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"JavaScript"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("substring")]),s._v("("),_("span",{staticClass:"hljs-number"},[s._v("4")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => Script")]),s._v("\n")])]),_("h4",[s._v("6.2.3. 是否有必要构建一个复杂的正则？")]),_("p",[s._v("比如密码匹配问题，要求密码长度 "),_("code",[s._v("6-12")]),s._v(" 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符。")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/(?!^["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("]{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("12")]),s._v("}$)(?!^[a-z]{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("12")]),s._v("}$)(?!^[A-Z]{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("12")]),s._v("}$)^["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("-9A-"),_("span",{staticClass:"hljs-title class_"},[s._v("Za")]),s._v("-z]{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("12")]),s._v("}$/\n")])]),_("p",[s._v("其实可以使用多个小正则来做：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex1 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^[0-9A-Za-z]{6,12}$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex2 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^[0-9]{6,12}$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex3 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^[A-Z]{6,12}$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex4 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^[a-z]{6,12}$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("checkPassword")]),s._v(" (string) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (!regex1."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string)) "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),_("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (regex2."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string)) "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),_("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (regex3."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string)) "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),_("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (regex4."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string)) "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),_("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),_("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v("; }\n")])]),_("h3",[s._v("6.3. 准确性")]),_("p",[s._v("所谓准确性，就是能匹配预期的目标，并且不匹配非预期的目标。")]),_("p",[s._v("这里提到了“预期”二字，那么我们就需要知道目标的组成规则。")]),_("p",[s._v("不然没法界定什么样的目标字符串是符合预期的，什么样的又不是符合预期的。")]),_("p",[s._v("下面将举例说明，当目标字符串构成比较复杂时，该如何构建正则，并考虑到哪些平衡。")]),_("h4",[s._v("6.3.1. 匹配固定电话")]),_("p",[s._v("比如要匹配如下格式的固定电话号码：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-number"},[s._v("055188888888")]),s._v("\n"),_("span",{staticClass:"hljs-number"},[s._v("0551")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("88888888")]),s._v("\n("),_("span",{staticClass:"hljs-number"},[s._v("0551")]),s._v(")"),_("span",{staticClass:"hljs-number"},[s._v("88888888")]),s._v("\n")])]),_("p",[s._v("第一步，了解各部分的模式规则。")]),_("p",[s._v("上面的电话，总体上分为"),_("strong",[s._v("区号")]),s._v("和"),_("strong",[s._v("号码")]),s._v("两部分（不考虑分机号和 "),_("code",[s._v('"+86"')]),s._v(" 的情形）。")]),_("p",[s._v("区号是 "),_("code",[s._v('"0"')]),s._v(" 开头的 "),_("code",[s._v("3")]),s._v(" 到 "),_("code",[s._v("4")]),s._v(" 位数字，对应的正则是："),_("code",[s._v("0\\d{2,3}")]),s._v("，")]),_("p",[s._v("号码是非 "),_("code",[s._v('"0"')]),s._v(" 开头的 "),_("code",[s._v("7")]),s._v(" 到 "),_("code",[s._v("8")]),s._v(" 位数字，对应的正则是："),_("code",[s._v("[1-9]\\d{6,7}，")])]),_("p",[s._v("因此，匹配 "),_("code",[s._v('"055188888888"')]),s._v(" 的正则是："),_("code",[s._v("/^0\\d{2,3}[1-9]\\d{6,7}$/，")])]),_("p",[s._v("匹配 "),_("code",[s._v('"0551-88888888"')]),s._v(" 的正则是："),_("code",[s._v("/^0\\d{2,3}-[1-9]\\d{6,7}$/，")])]),_("p",[s._v("匹配 "),_("code",[s._v('"(0551)88888888"')]),s._v(" 的正则是："),_("code",[s._v("/^\\(0\\d{2,3}\\)[1-9]\\d{6,7}$/。")])]),_("p",[s._v("第二步，明确形式关系。")]),_("p",[s._v("这三者情形是或的关系，可以构建分支：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/^"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}["),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("]\\d{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("7")]),s._v("}$|^"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}-["),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("]\\d{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("7")]),s._v("}$|^\\("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}\\)["),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("]\\d{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("7")]),s._v("}$/\n")])]),_("p",[s._v("提取公共部分：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/^("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}|"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}-|\\("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}\\))["),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("]\\d{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("7")]),s._v("}$/\n")])]),_("p",[s._v("进一步简写：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/^("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}-?|\\("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}\\))["),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("]\\d{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("7")]),s._v("}$/\n")])]),_("p",[s._v("其可视化形式：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"80%"},attrs:{src:t("babd")}}),_("p",[s._v("上面的正则构建过程略显罗嗦，但是这样做，能保证正则是准确的。")]),_("p",[s._v("上述三种情形是或的关系，这一点很重要，不然很容易按字符是否出现的情形把正则写成：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("/^\\(?"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\\d{"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}\\)?-?["),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("]\\d{"),_("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(","),_("span",{staticClass:"hljs-number"},[s._v("7")]),s._v("}$/\n")])]),_("p",[s._v("虽然也能匹配上述目标字符串，但也会匹配 "),_("code",[s._v('"(0551-88888888"')]),s._v(" 这样的字符串。当然，这不是我们想要的。")]),_("p",[s._v("其实这个正则也不是完美的，因为现实中，并不是每个 3 位数和 4 位数都是一个真实的区号。")]),_("p",[s._v("这就是一个平衡取舍问题，一般够用就行。")]),_("h4",[s._v("6.3.2. 匹配浮点数")]),_("p",[s._v("要求匹配如下的格式：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-number"},[s._v("1.23")]),s._v("、+"),_("span",{staticClass:"hljs-number"},[s._v("1.23")]),s._v("、-"),_("span",{staticClass:"hljs-number"},[s._v("1.23")]),s._v("\n"),_("span",{staticClass:"hljs-number"},[s._v("10")]),s._v("、+"),_("span",{staticClass:"hljs-number"},[s._v("10")]),s._v("、-"),_("span",{staticClass:"hljs-number"},[s._v("10")]),s._v("\n"),_("span",{staticClass:"hljs-number"},[s._v(".2")]),s._v("、+"),_("span",{staticClass:"hljs-number"},[s._v(".2")]),s._v("、-"),_("span",{staticClass:"hljs-number"},[s._v(".2")]),s._v("\n")])]),_("p",[s._v("可以看出正则分为三部分。")]),_("p",[s._v("符号部分："),_("code",[s._v("[+-]")]),s._v("，")]),_("p",[s._v("整数部分："),_("code",[s._v("\\d+")]),s._v("，")]),_("p",[s._v("小数部分："),_("code",[s._v("\\.\\d+")]),s._v("。")]),_("p",[s._v("上述三个部分，并不是全部都出现。如果此时很容易写出如下的正则：")]),_("p",[_("code",[s._v("/^[+-]?(\\d+)?(\\.\\d+)?$/")])]),_("p",[s._v("此正则看似没问题，但这个正则也会匹配空字符 "),_("code",[s._v('""')]),s._v("。")]),_("p",[s._v("因为目标字符串的形式关系不是要求每部分都是可选的。")]),_("p",[s._v("要匹配 "),_("code",[s._v('"1.23"、"+1.23"、"-1.23"')]),s._v("，可以用"),_("code",[s._v("/^[+-]?\\d+\\.\\d+$/")]),s._v("，")]),_("p",[s._v("要匹配 "),_("code",[s._v('"10"、"+10"、"-10"')]),s._v("，可以用"),_("code",[s._v("/^[+-]?\\d+$/")]),s._v("，")]),_("p",[s._v("要匹配 "),_("code",[s._v('".2"、"+.2"、"-.2"')]),s._v("，可以用"),_("code",[s._v("/^[+-]?\\.\\d+$/")]),s._v("。")]),_("p",[s._v("因此整个正则是这三者的或的关系，提取公众部分后是：")]),_("p",[_("code",[s._v("/^[+-]?(\\d+\\.\\d+|\\d+|\\.\\d+)$/")])]),_("p",[s._v("其可视化形式是：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("5fab")}}),_("p",[s._v("如果要求不匹配 "),_("code",[s._v('"+.2"')]),s._v(" 和 "),_("code",[s._v('"-.2"')]),s._v("，此时正则变成：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("dd6b")}}),_("p",[s._v("当然，"),_("code",[s._v("/^[+-]?(\\d+\\.\\d+|\\d+|\\.\\d+)$/")]),s._v(" 也不是完美的，我们也是做了些取舍，比如：")]),_("p",[s._v("它也会匹配 "),_("code",[s._v('"012"')]),s._v(" 这样以 "),_("code",[s._v('"0"')]),s._v(" 开头的整数。如果要求不匹配的话，需要修改整数部分的正则。一般进行验 证操作之前，都要经过 trim 和判空。那样的话，也许那个错误正则也就够用了。也可以进一步改写成： "),_("code",[s._v("/^[+-]?(\\d+)?(\\.)?\\d+$/")]),s._v("，这样我们就需要考虑可读性和可维护性了。")]),_("h3",[s._v("6.4. 效率")]),_("p",[s._v("保证了准确性后，才需要是否要考虑要优化。大多数情形是不需要优化的，除非运行的非常慢。什么情形正 则表达式运行才慢呢？我们需要考察正则表达式的运行过程（原理）。")]),_("p",[s._v("正则表达式的运行分为如下的阶段：")]),_("ol",[_("li",[s._v("编译；")]),_("li",[s._v("设定起始位置；")]),_("li",[s._v("尝试匹配；")]),_("li",[s._v("匹配失败的话，从下一位开始继续第 3 步；")]),_("li",[s._v("最终结果：匹配成功或失败。")])]),_("p",[s._v("下面以代码为例，来看看这几个阶段都做了什么：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d+/g")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(", regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"123abc34def"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(", regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"123abc34def"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(", regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"123abc34def"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(", regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"123abc34def"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => 0 ["123", index: 0, input: "123abc34def"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => 3 ["34", index: 6, input: "123abc34def"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 8 null")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => 0 ["123", index: 0, input: "123abc34def"]')]),s._v("\n")])]),_("p",[s._v("具体分析如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d+/g")]),s._v(";\n")])]),_("p",[s._v("当生成一个正则时，引擎会对其进行编译。报错与否出现这这个阶段。")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"123abc34def"')]),s._v(")\n")])]),_("p",[s._v("当尝试匹配时，需要确定从哪一位置开始匹配。一般情形都是字符串的开头，即第 0 位。")]),_("p",[s._v("但当使用 "),_("code",[s._v("test")]),s._v(" 和 "),_("code",[s._v("exec")]),s._v(" 方法，且正则有 g 时，起始位置是从正则对象的 "),_("code",[s._v("lastIndex")]),s._v(" 属性开始。 因此第一次 "),_("code",[s._v("exec")]),s._v(" 是从第 0 位开始，而第二次是从 3 开始的。")]),_("p",[s._v("设定好起始位置后，就开始尝试匹配了。")]),_("p",[s._v("比如第一次 "),_("code",[s._v("exec")]),s._v("，从 0 开始，去尝试匹配，并且成功地匹配到 3 个数字。此时结束时的下标是 2，因此下一次的起始位置是 3。 而第二次，起始下标是 3，但第 3 个字符是 "),_("code",[s._v('"a"')]),s._v("，并不是数字。但此时并不会直接报匹配失败，而是移动到下一位置，即从第 4 位开始继续尝试匹配，但该字符是 "),_("code",[s._v('"b"')]),s._v("，也不是数字。再移动到下一位，是 "),_("code",[s._v('"c"')]),s._v(" 仍不行，再移动一位是数字 "),_("code",[s._v('"3"')]),s._v("，此时匹配到了两位数字 "),_("code",[s._v('"34"')]),s._v("。此时，下一次匹配的位置是 "),_("code",[s._v('"d"')]),s._v(" 的位置，即第8 位。")]),_("p",[s._v("第三次，是从第 8 位开始匹配，直到试到最后一位，也没发现匹配的，因此匹配失败，返回 "),_("code",[s._v("null")]),s._v("。同时设置 "),_("code",[s._v("lastIndex")]),s._v(" 为 0，即，如要再尝试匹配的话，需从头开始。")]),_("p",[s._v("从上面可以看出，匹配会出现效率问题，主要出现在上面的第 3 阶段和第 4 阶段。 因此，主要优化手法也是针对这两阶段的")]),_("h4",[s._v("6.4.1. 使用具体型字符组来代替通配符，来消除回溯")]),_("p",[s._v("而在第三阶段，最大的问题就是回溯。 例如，匹配双引用号之间的字符。如，匹配字符串 "),_("code",[s._v('123"abc"456')]),s._v(" 中的 "),_("code",[s._v('"abc"')]),s._v("。")]),_("p",[s._v("如果正则用的是："),_("code",[s._v('/".*"/')]),s._v("，会在第 "),_("code",[s._v("3")]),s._v(" 阶段产生 "),_("code",[s._v("4")]),s._v(" 次回溯（粉色表示 "),_("code",[s._v(".*")]),s._v(" 匹配的内容）：")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("4a6a")}}),_("p",[s._v("如果正则用的是："),_("code",[s._v('/".*?"/')]),s._v("，会产生 2 次回溯（粉色表示 "),_("code",[s._v(".*?")]),s._v(" 匹配的内容）")]),_("img",{staticStyle:{display:"flex",margin:"auto",width:"60%"},attrs:{src:t("3085")}}),_("p",[s._v("因为回溯的存在，需要引擎保存多种可能中未尝试过的状态，以便后续回溯时使用。注定要占用一定的内存。")]),_("p",[s._v("此时要使用具体化的字符组，来代替通配符"),_("code",[s._v(".")]),s._v("，以便消除不必要的字符，此时使用正则 "),_("code",[s._v('/"[^"]*"/')]),s._v("，即可。")]),_("h4",[s._v("6.4.2. 使用非捕获型分组")]),_("p",[s._v("因为括号的作用之一是，可以捕获分组和分支里的数据。那么就需要内存来保存它们。")]),_("p",[s._v("当我们不需要使用分组引用和反向引用时，此时可以使用非捕获分组。")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("例如，/^[-]?(\\d\\.\\d+|\\d+|\\.\\d+)$/ 可以修改成：/^[-]?(?:\\d\\.\\d+|\\d+|\\.\\d+)$/。\n")])]),_("h4",[s._v("6.4.3. 独立出确定字符")]),_("p",[s._v("例如，"),_("code",[s._v("/a+/")]),s._v(" 可以修改成 "),_("code",[s._v("/aa*/")]),s._v("。 因为后者能比前者多确定了字符 "),_("code",[s._v('"a"')]),s._v("。这样会在第四步中，加快判断是否匹配失败，进而加快移位的速度。")]),_("h4",[s._v("6.4.4. 提取分支公共部分")]),_("p",[s._v("比如，"),_("code",[s._v("/^abc|^def/")]),s._v(" 修改成 "),_("code",[s._v("/^(?:abc|def)/")]),s._v("。")]),_("p",[s._v("又比如， "),_("code",[s._v("/this|that/")]),s._v("修改成 "),_("code",[s._v("/th(?:is|at)/")]),s._v("。")]),_("p",[s._v("这样做，可以减少匹配过程中可消除的重复。")]),_("h4",[s._v("6.4.5. 减少分支的数量，缩小它们的范围")]),_("p",[_("code",[s._v("/red|read/")]),s._v(" 可以修改成 "),_("code",[s._v("/rea?d/")]),s._v("。")]),_("p",[s._v("此时分支和量词产生的回溯的成本是不一样的。但这样优化后，可读性会降低的。")]),_("h3",[s._v("6.5. 本章小结")]),_("p",[s._v("本章涉及的内容并不多。")]),_("p",[s._v("一般情况下，针对某问题能写出一个满足需求的正则，基本上就可以了。")]),_("p",[s._v("至于准确性和效率方面的追求，纯属看个人要求了。我觉得够用就行了。")]),_("p",[s._v("关于准确性，本章关心的是最常用的解决思路： 针对每种情形，分别写出正则，然用分支把它们合并在一起，再提取分支公共部分，就能得到准确的正则。")]),_("p",[s._v("至于优化，本章没有为了凑数，去写一大堆。了解了匹配原理，常见的优化手法也就这么几种")]),_("h2",[s._v("7. 第七章 正则表达式编程")]),_("p",[s._v("什么叫知识，能指导我们实践的东西才叫知识。")]),_("p",[s._v("学习一样东西，如果不能使用，最多只能算作纸上谈兵。正则表达式的学习，也不例外。")]),_("p",[s._v("掌握了正则表达式的语法后，下一步，也是关键的一步，就是在真实世界中使用它。")]),_("p",[s._v("那么如何使用正则表达式呢？有哪些关键的点呢？本章就解决这个问题。")]),_("p",[s._v("内容包括：")]),_("p",[_("strong",[s._v("正则表达式的四种操作")])]),_("p",[_("strong",[s._v("相关API注意要点")])]),_("p",[_("strong",[s._v("真实案例")])]),_("h3",[s._v("7.1. 正则表达式的四种操作")]),_("p",[s._v("正则表达式是匹配模式，不管如何使用正则表达式，万变不离其宗，都需要先“匹配”。")]),_("p",[s._v("有了匹配这一基本操作后，才有其他的操作："),_("strong",[s._v("验证、切分、提取、替换")]),s._v("。")]),_("p",[s._v("进行任何相关操作，也需要宿主引擎相关 "),_("code",[s._v("API")]),s._v(" 的配合使用。当然，在 "),_("code",[s._v("JavaScript")]),s._v(" 中，相关 "),_("code",[s._v("API")]),s._v(" 也不多。")]),_("h4",[s._v("7.1.1. 验证")]),_("p",[s._v("验证是正则表达式最直接的应用，比如表单验证。")]),_("p",[s._v("在说验证之前，先要说清楚匹配是什么概念。")]),_("p",[s._v("所谓匹配，就是看目标字符串里是否有满足匹配的子串。因此，“匹配”的本质就是“查找”。")]),_("p",[s._v("有没有匹配，是不是匹配上，判断是否的操作，即称为“验证”。")]),_("p",[s._v("这里举一个例子，来看看如何使用相关 "),_("code",[s._v("API")]),s._v(" 进行验证操作的。")]),_("p",[s._v("比如，判断一个字符串中是否有数字。")]),_("p",[s._v("使用 "),_("code",[s._v("search：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"abc123"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( !!~string."),_("span",{staticClass:"hljs-title function_"},[s._v("search")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("使用 "),_("code",[s._v("test：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"abc123"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("使用 "),_("code",[s._v("match：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"abc123"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( !!string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("使用 "),_("code",[s._v("exec：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"abc123"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( !!regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("p",[s._v("其中，最常用的是 "),_("code",[s._v("test。")])]),_("h4",[s._v("7.1.2. 切分")]),_("p",[s._v("匹配上了，我们就可以进行一些操作，比如切分。")]),_("p",[s._v("所谓“切分”，就是把目标字符串，切成一段一段的。在 "),_("code",[s._v("JavaScript")]),s._v(" 中使用的是 "),_("code",[s._v("split。")])]),_("p",[s._v("比如，目标字符串是 "),_("code",[s._v('"html,css,javascript"')]),s._v("，按逗号来切分：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/,/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"html,css,javascript"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["html", "css", "javascript"]')]),s._v("\n")])]),_("p",[s._v("又比如，如下的日期格式：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-number"},[s._v("2017")]),s._v("/"),_("span",{staticClass:"hljs-number"},[s._v("06")]),s._v("/"),_("span",{staticClass:"hljs-number"},[s._v("26")]),s._v("\n"),_("span",{staticClass:"hljs-number"},[s._v("2017.06")]),_("span",{staticClass:"hljs-number"},[s._v(".26")]),s._v("\n"),_("span",{staticClass:"hljs-number"},[s._v("2017")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("06")]),s._v("-"),_("span",{staticClass:"hljs-number"},[s._v("26")]),s._v("\n")])]),_("p",[s._v("可以使用 "),_("code",[s._v("split")]),s._v(" “切出”年月日：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\D/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-string"},[s._v('"2017/06/26"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-string"},[s._v('"2017.06.26"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-26"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "06", "26"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "06", "26"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "06", "26"]')]),s._v("\n")])]),_("h4",[s._v("7.1.3. 提取")]),_("p",[s._v("虽然整体匹配上了，但有时需要提取部分匹配的数据。")]),_("p",[s._v("此时正则通常要使用分组引用（分组捕获）功能，还需要配合使用相关 "),_("code",[s._v("API。")])]),_("p",[s._v("这里，还是以日期为例，提取出年月日。注意下面正则中的括号：")]),_("p",[s._v("使用 "),_("code",[s._v("match：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-26"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]')]),s._v("\n")])]),_("p",[s._v("使用 "),_("code",[s._v("exec：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-26"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]')]),s._v("\n")])]),_("p",[s._v("使用 "),_("code",[s._v("test：")])]),_("pre",{staticClass:"hljs"},[_("code",[s._v('var regex = /^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/;\nvar string = "2017-06-26";\nregex.test(string);\nconsole.log( RegExp.$1, RegExp.$2, RegExp.$3 );\n// => "2017" "06" "26"\n')])]),_("p",[s._v("使用 "),_("code",[s._v("search：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-26"')]),s._v(";\nstring."),_("span",{staticClass:"hljs-title function_"},[s._v("search")]),s._v("(regex);\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$1")]),s._v(", "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$2")]),s._v(", "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("$3")]),s._v(" );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "2017" "06" "26"')]),s._v("\n")])]),_("p",[s._v("使用 "),_("code",[s._v("replace：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/^(\\d{4})\\D(\\d{2})\\D(\\d{2})$/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-26"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" date = [];\nstring."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("(regex, "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("match, year, month, day")]),s._v(") {\n  date."),_("span",{staticClass:"hljs-title function_"},[s._v("push")]),s._v("(year, month, day);\n});\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(date);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "06", "26"]')]),s._v("\n")])]),_("p",[s._v("其中，最常用的是 "),_("code",[s._v("match。")])]),_("h4",[s._v("7.1.4. 替换")]),_("p",[s._v("找，往往不是目的，通常下一步是为了替换。在 "),_("code",[s._v("JavaScript")]),s._v(" 中，使用 "),_("code",[s._v("replace")]),s._v(" 进行替换。")]),_("p",[s._v("比如把日期格式，从 "),_("code",[s._v("yyyy-mm-dd")]),s._v(" 替换成 "),_("code",[s._v("yyyy/mm/dd：")])]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-26"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" today = "),_("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("Date")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/-/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( today );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => Mon Jun 26 2017 00:00:00 GMT+0800 (中国标准时间)")]),s._v("\n")])]),_("p",[s._v("这里只是简单地应用了一下 "),_("code",[s._v("replace")]),s._v("。但，"),_("code",[s._v("replace")]),s._v(" 方法很是强大的，是需要重点掌握的。")]),_("h3",[s._v("7.2. 相关 API 注意要点")]),_("p",[s._v("从上面可以看出用于正则操作的方法，共有 6 个，字符串实例 4 个，正则实例 2 个：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-title class_"},[s._v("String")]),s._v("#search\n"),_("span",{staticClass:"hljs-title class_"},[s._v("String")]),s._v("#split\n"),_("span",{staticClass:"hljs-title class_"},[s._v("String")]),s._v("#match\n"),_("span",{staticClass:"hljs-title class_"},[s._v("String")]),s._v("#replace\n"),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("#test\n"),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("#exec\n")])]),_("h4",[s._v("7.2.1. "),_("code",[s._v("search")]),s._v(" 和 "),_("code",[s._v("match")]),s._v(" 的参数问题")]),_("p",[s._v("我们知道字符串实例的那 4 个方法参数都支持正则和字符串。")]),_("p",[s._v("但 "),_("code",[s._v("search")]),s._v(" 和 "),_("code",[s._v("match")]),s._v("，会把字符串转换为正则的。")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017.06.27"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("search")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"."')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 0")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("//需要修改成下列形式之一")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("search")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"\\\\."')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("search")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/\\./")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 4")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 4")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"."')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2", index: 0, input: "2017.06.27"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("//需要修改成下列形式之一")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"\\\\."')]),s._v(") );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/\\./")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => [".", index: 4, input: "2017.06.27"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => [".", index: 4, input: "2017.06.27"]')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"."')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "06", "27"]')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"."')]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "2017/06.27"')]),s._v("\n")])]),_("p",[s._v("7.2.2. "),_("code",[s._v("match")]),s._v(" 返回结果的格式问题")]),_("p",[_("code",[s._v("match")]),s._v(" 返回结果的格式，与正则对象是否有修饰符 "),_("code",[s._v("g")]),s._v(" 有关。")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017.06.27"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex1 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\b(\\d+)\\b/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex2 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\b(\\d+)\\b/g")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex1) );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex2) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "2017", index: 0, input: "2017.06.27"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "06", "27"]')]),s._v("\n")])]),_("p",[s._v("没有 "),_("code",[s._v("g")]),s._v("，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。")]),_("p",[s._v("有 "),_("code",[s._v("g")]),s._v("，返回的是所有匹配的内容。")]),_("p",[s._v("当没有匹配时，不管有无 "),_("code",[s._v("g")]),s._v("，都返回 "),_("code",[s._v("null。")])]),_("h4",[s._v("7.2.3. "),_("code",[s._v("exec")]),s._v(" 比 "),_("code",[s._v("match")]),s._v(" 更强大")]),_("p",[s._v("当正则没有 "),_("code",[s._v("g")]),s._v(" 时，使用 "),_("code",[s._v("match")]),s._v(" 返回的信息比较多。但是有 "),_("code",[s._v("g")]),s._v(" 后，就没有关键的信息 "),_("code",[s._v("index")]),s._v(" 了。")]),_("p",[s._v("而 "),_("code",[s._v("exec")]),s._v(" 方法就能解决这个问题，它能接着上一次匹配后继续匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017.06.27"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex2 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\b(\\d+)\\b/g")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex2."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex2."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex2."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex2."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex2."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex2."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex2."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex2."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(");\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "2017", index: 0, input: "2017.06.27"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 4")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["06", "06", index: 5, input: "2017.06.27"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 7")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["27", "27", index: 8, input: "2017.06.27"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 10")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => null")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => 0")]),s._v("\n")])]),_("p",[s._v("其中正则实例 "),_("code",[s._v("lastIndex")]),s._v(" 属性，表示下一次匹配开始的位置。")]),_("p",[s._v("比如第一次匹配了 "),_("code",[s._v('"2017"')]),s._v("，开始下标是 "),_("code",[s._v("0")]),s._v("，共 "),_("code",[s._v("4")]),s._v(" 个字符，因此这次匹配结束的位置是 "),_("code",[s._v("3")]),s._v("，下一次开始匹配的位置是 "),_("code",[s._v("4")]),s._v("。")]),_("p",[s._v("从上述代码看出，在使用 "),_("code",[s._v("exec")]),s._v(" 时，经常需要配合使用 "),_("code",[s._v("while")]),s._v(" 循环：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017.06.27"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex2 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\b(\\d+)\\b/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result;\n"),_("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" ( result = regex2."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) ) {\n  "),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( result, regex2."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(" ); }\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "2017", index: 0, input: "2017.06.27"] 4')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["06", "06", index: 5, input: "2017.06.27"] 7')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["27", "27", index: 8, input: "2017.06.27"] 10')]),s._v("\n")])]),_("p",[s._v("其中正则实例 "),_("code",[s._v("lastIndex")]),s._v(" 属性，表示下一次匹配开始的位置。")]),_("p",[s._v("比如第一次匹配了 "),_("code",[s._v('"2017"')]),s._v("，开始下标是 0，共 4 个字符，因此这次匹配结束的位置是 3，下一次开始匹配的位置是 4。")]),_("p",[s._v("从上述代码看出，在使用 "),_("code",[s._v("exec")]),s._v(" 时，经常需要配合使用 "),_("code",[s._v("while")]),s._v(" 循环：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017.06.27"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex2 = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\b(\\d+)\\b/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result;\n"),_("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" ( result = regex2."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(string) ) {\n  "),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( result, regex2."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(" ); }\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017", "2017", index: 0, input: "2017.06.27"] 4')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["06", "06", index: 5, input: "2017.06.27"] 7')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["27", "27", index: 8, input: "2017.06.27"] 10')]),s._v("\n")])]),_("h4",[s._v("7.2.4. 修饰符 "),_("code",[s._v("g")]),s._v("，对 "),_("code",[s._v("exex")]),s._v(" 和 "),_("code",[s._v("test")]),s._v(" 的影响")]),_("p",[s._v("上面提到了正则实例的 "),_("code",[s._v("lastIndex")]),s._v(" 属性，表示尝试匹配时，从字符串的 "),_("code",[s._v("lastIndex")]),s._v(" 位开始去匹配。")]),_("p",[s._v("字符串的四个方法，每次匹配时，都是从 "),_("code",[s._v("0")]),s._v(" 开始的，即 "),_("code",[s._v("lastIndex")]),s._v(" 属性始终不变。")]),_("p",[s._v("而正则实例的两个方法 "),_("code",[s._v("exec、test")]),s._v("，当正则是全局匹配时，每一次匹配完成后，都会修改 "),_("code",[s._v("lastIndex")]),s._v("。下面让我们以 "),_("code",[s._v("test")]),s._v(" 为例，看看你是否会迷糊：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/a/g")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"a"')]),s._v("), regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"aba"')]),s._v("), regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"ababc"')]),s._v("), regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(" );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true 1")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true 3")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => false 0")]),s._v("\n")])]),_("p",[s._v("注意上面代码中的第三次调用 "),_("code",[s._v("test")]),s._v("，因为这一次尝试匹配，开始从下标 "),_("code",[s._v("lastIndex")]),s._v("，即 3 位置处开始查 找，自然就找不到了。")]),_("p",[s._v("如果没有 "),_("code",[s._v("g")]),s._v("，自然都是从字符串第 "),_("code",[s._v("0")]),s._v(" 个字符处开始尝试匹配：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/a/")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"a"')]),s._v("), regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"aba"')]),s._v("), regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"ababc"')]),s._v("), regex."),_("span",{staticClass:"hljs-property"},[s._v("lastIndex")]),s._v(" );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true 0")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true 0")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true 0")]),s._v("\n")])]),_("h4",[s._v("7.2.5. "),_("code",[s._v("test")]),s._v(" 整体匹配时需要使用 "),_("code",[s._v("^")]),s._v(" 和 "),_("code",[s._v("$")])]),_("p",[s._v("这个相对容易理解，因为 "),_("code",[s._v("test")]),s._v(" 是看目标字符串中是否有子串匹配正则，即有部分匹配即可。")]),_("p",[s._v("如果，要整体匹配，正则前后需要添加开头和结尾：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-regexp"},[s._v("/123/")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"a123b"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-regexp"},[s._v("/^123$/")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"a123b"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => false")]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-regexp"},[s._v("/^123$/")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"123"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("h4",[s._v("7.2.6. "),_("code",[s._v("split")]),s._v(" 相关注意事项")]),_("p",[_("code",[s._v("split")]),s._v(" 方法看起来不起眼，但要注意的地方有两个的。")]),_("p",[s._v("第一，它可以有第二个参数，表示结果数组的最大长度：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"html,css,javascript"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/,/")]),s._v(", "),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// =>["html", "css"]')]),s._v("\n")])]),_("p",[s._v("第二，正则使用分组时，结果数组中是包含分隔符的：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"html,css,javascript"')]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(,)/")]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// =>["html", ",", "css", ",", "javascript"]')]),s._v("\n")])]),_("h4",[s._v("7.2.7. replace 是很强大的")]),_("p",[s._v("总体来说 "),_("code",[s._v("replace")]),s._v(" 有两种使用形式，这是因为它的第二个参数，可以是"),_("strong",[s._v("字符串")]),s._v("，也可以是"),_("strong",[s._v("函数")]),s._v("。")]),_("p",[s._v("当第二个参数是字符串时，如下的字符有特殊的含义：")]),_("table",[_("thead",[_("tr",[_("th",[s._v("属性")]),_("th",[s._v("描述")])])]),_("tbody",[_("tr",[_("td",[_("code",[s._v("$1,$2,…,$99")])]),_("td",[s._v("匹配第 "),_("code",[s._v("1-99")]),s._v(" 个 分组里捕获的文本")])]),_("tr",[_("td",[_("code",[s._v("$&")])]),_("td",[s._v("匹配到的子串文本")])]),_("tr",[_("td",[_("code",[s._v(" $")]),s._v(" `")]),_("td",[s._v("匹配到的子串的左边文本")])]),_("tr",[_("td",[_("code",[s._v("$'")])]),_("td",[s._v("匹配到的子串的右边文本")])]),_("tr",[_("td",[_("code",[s._v("$$")])]),_("td",[s._v("美元符号")])])])]),_("p",[s._v("例如，把 "),_("code",[s._v('"2,3,5"')]),s._v("，变成 "),_("code",[s._v('"5=2+3"')]),s._v("：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"2,3,5"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d+),(\\d+),(\\d+)/")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('"$3=$1+$2"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "5=2+3"')]),s._v("\n")])]),_("p",[s._v("又例如，把 "),_("code",[s._v('"2,3,5"')]),s._v("，变成 "),_("code",[s._v('"222,333,555"')]),s._v(":")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"2,3,5"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d+)/g")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('"$&$&$&"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "222,333,555"')]),s._v("\n")])]),_("p",[s._v("再例如，把 "),_("code",[s._v('"2+3=5"')]),s._v("，变成 "),_("code",[s._v('"2+3=2+3=5=5"')]),s._v(":")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = "),_("span",{staticClass:"hljs-string"},[s._v('"2+3=5"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/=/")]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('"$&$`$&$\'$&"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("(result);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "2+3=2+3=5=5"')]),s._v("\n")])]),_("p",[s._v("我们对最后这个进行一下说明。要把 "),_("code",[s._v('"2+3=5"')]),s._v("，变成 "),_("code",[s._v('"2+3=2+3=5=5"')]),s._v("，其实就是想办法把 "),_("code",[s._v("=")]),s._v(" 替换成 "),_("code",[s._v("=2+3=5=")]),s._v("，其中，"),_("code",[s._v("$&")]),s._v(" 匹配的是 "),_("code",[s._v("=")]),s._v("，")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("$` 匹配的是 2+3，\n")])]),_("pre",{staticClass:"hljs"},[_("code",[s._v("$' 匹配的是 5。\n")])]),_("p",[s._v("因此使用")]),_("pre",{staticClass:"hljs"},[_("code",[s._v('"$&$`$&$\'$&"\n')])]),_("p",[s._v("便达成了目的。")]),_("p",[s._v("当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-string"},[s._v('"1234 2345 3456"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/(\\d)\\d{2}(\\d)/g")]),s._v(", "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("match, $"),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", $"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", index, input")]),s._v(") {\n  "),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("([match, $"),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", $"),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", index, input]);\n});\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["1234", "1", "4", 0, "1234 2345 3456"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2345", "2", "5", 5, "1234 2345 3456"]')]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["3456", "3", "6", 10, "1234 2345 3456"]')]),s._v("\n")])]),_("p",[s._v("此时我们可以看到 "),_("code",[s._v("replace")]),s._v(" 拿到的信息，并不比 "),_("code",[s._v("exec")]),s._v(" 少")]),_("h4",[s._v("7.2.8. 使用构造函数需要注意的问题")]),_("p",[s._v("一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多 "),_("code",[s._v("\\")]),s._v("。")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"2017-06-27 2017.06.27 2017/06/27"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\d{4}(-|\\.|\\/)\\d{2}\\1\\d{2}/g")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017-06-27", "2017.06.27", "2017/06/27"]')]),s._v("\nregex = "),_("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"\\\\d{4}(-|\\\\.|\\\\/)\\\\d{2}\\\\1\\\\d{2}"')]),s._v(", "),_("span",{staticClass:"hljs-string"},[s._v('"g"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( string."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex) );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => ["2017-06-27", "2017.06.27", "2017/06/27"]')]),s._v("\n")])]),_("h4",[s._v("7.2.9. 修饰符")]),_("p",[s._v("ES5 中修饰符，共 3 个：")]),_("table",[_("thead",[_("tr",[_("th",[s._v("修饰符")]),_("th",[s._v("描述")])])]),_("tbody",[_("tr",[_("td",[_("code",[s._v("g")])]),_("td",[s._v("全局匹配，即找到所有匹配的，单词是 "),_("code",[s._v("global。")])])]),_("tr",[_("td",[_("code",[s._v("i")])]),_("td",[s._v("忽略字母大小写，单词是 "),_("code",[s._v("ingoreCase。")])])]),_("tr",[_("td",[_("code",[s._v("m")])]),_("td",[s._v("多行匹配，只影响 "),_("code",[s._v("^")]),s._v(" 和 "),_("code",[s._v("$")]),s._v("，二者变成行的概念，即行开头和行结尾。单词是 "),_("code",[s._v("multiline。")])])])])]),_("p",[s._v("当然正则对象也有相应的只读属性：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/\\w/img")]),s._v(";\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-property"},[s._v("global")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-property"},[s._v("ignoreCase")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-property"},[s._v("multiline")]),s._v(" );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("h4",[s._v("7.2.10. source 属性")]),_("p",[s._v("正则实例对象属性，除了 "),_("code",[s._v("global、ingnoreCase、multiline、lastIndex")]),s._v(" 属性之外，还有一个 "),_("code",[s._v("source")]),s._v("属性。")]),_("p",[s._v("它什么时候有用呢？")]),_("p",[s._v("比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" className = "),_("span",{staticClass:"hljs-string"},[s._v('"high"')]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"(^|\\\\s)"')]),s._v(" + className + "),_("span",{staticClass:"hljs-string"},[s._v('"(\\\\s|$)"')]),s._v(");\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( regex."),_("span",{staticClass:"hljs-property"},[s._v("source")]),s._v(" )\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => (^|\\s)high(\\s|$) 即字符串"(^|\\\\s)high(\\\\s|$)"')]),s._v("\n")])]),_("h4",[s._v("7.2.11. 构造函数属性")]),_("p",[s._v("构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是 "),_("code",[s._v("$1,…,$9")]),s._v(" 之外，还有几个不太常用的属性（有兼容性问题）：")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("| 静态属性              | 描述                            | 简写形式     |\n| --------------------- | ------------------------------- | ------------ |\n| "),_("span",{staticClass:"hljs-string"},[s._v("`RegExp.input`")]),s._v("        | 最近一次目标字符串              | "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$_"')]),s._v("] |\n| "),_("span",{staticClass:"hljs-string"},[s._v("`RegExp.lastMatch`")]),s._v("    | 最近一次匹配的文本              | "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$&"')]),s._v("] |\n| "),_("span",{staticClass:"hljs-string"},[s._v("`RegExp.lastParen`")]),s._v("    | 最近一次捕获的文本              | "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$+"')]),s._v("] |\n| "),_("span",{staticClass:"hljs-string"},[s._v("`RegExp.leftContext`")]),s._v("  | 目标字符串中lastMatch之前的文本 | "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$`"')]),s._v("] |\n| "),_("span",{staticClass:"hljs-string"},[s._v("`RegExp.rightContext`")]),s._v(" | 目标字符串中lastMatch之后的文本 | "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$\'"')]),s._v("] |\n")])]),_("p",[s._v("测试代码如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-regexp"},[s._v("/([abc])(\\d)/g")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" string = "),_("span",{staticClass:"hljs-string"},[s._v('"a1b2c3d4e5"')]),s._v(";\nstring."),_("span",{staticClass:"hljs-title function_"},[s._v("match")]),s._v("(regex);\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("input")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$_"')]),s._v("]);\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "a1b2c3d4e5"')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("lastMatch")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$&"')]),s._v("] );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "c3"')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("lastParen")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$+"')]),s._v("] );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "3"')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("leftContext")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$`"')]),s._v("] );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "a1b2"')]),s._v("\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("rightContext")]),s._v(" );\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("["),_("span",{staticClass:"hljs-string"},[s._v('"$\'"')]),s._v("] );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "d4e5"')]),s._v("\n")])]),_("h3",[s._v("7.3. 真实案例")]),_("h4",[s._v("7.3.1. 使用构造函数生成正则表达式")]),_("p",[s._v("我们知道要优先使用字面量来创建正则，但有时正则表达式的主体是不确定的，此时可以使用构造函数来创建。")]),_("p",[s._v("模拟 "),_("code",[s._v("getElementsByClassName")]),s._v(" 方法，就是很能说明该问题的一个例子。")]),_("p",[s._v("这里 "),_("code",[s._v("getElementsByClassName")]),s._v(" 函数的实现思路是：")]),_("p",[s._v("比如要获取 "),_("code",[s._v("className")]),s._v(" 为 "),_("code",[s._v('"high"')]),s._v(" 的 "),_("code",[s._v("dom")]),s._v(" 元素；")]),_("p",[s._v("首先生成一个正则："),_("code",[s._v("/(^|\\s)high(\\s|$)/")]),s._v(",")]),_("p",[s._v("然后再用其逐一验证页面上的所有"),_("code",[s._v("dom")]),s._v("元素的类名，拿到满足匹配的元素即可。")]),_("p",[s._v("代码如下(可以直接复制到本地查看运行效果)")]),_("pre",{staticClass:"hljs"},[_("code",[s._v("<p "),_("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"high"')]),s._v(">"),_("span",{staticClass:"hljs-number"},[s._v("1111")]),s._v("</p>\n"),_("span",{staticClass:"language-xml"},[_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("p")]),s._v(" "),_("span",{staticClass:"hljs-attr"},[s._v("class")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"high"')]),s._v(">")]),s._v("2222"),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("p")]),s._v(">")])]),s._v("\n"),_("span",{staticClass:"language-xml"},[_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("p")]),s._v(">")]),s._v("3333"),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("p")]),s._v(">")])]),s._v("\n"),_("span",{staticClass:"language-xml"},[_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),_("span",{staticClass:"language-javascript"},[s._v("\n"),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("getElementsByClassName")]),s._v(" (className) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" elements = "),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("getElementsByTagName")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"*"')]),s._v(");\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = "),_("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"(^|\\\\s)"')]),s._v(" + className + "),_("span",{staticClass:"hljs-string"},[s._v('"(\\\\s|$)"')]),s._v(");\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = [];\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("; i < elements."),_("span",{staticClass:"hljs-property"},[s._v("length")]),s._v("; i++) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" element = elements[i];\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (regex."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("(element."),_("span",{staticClass:"hljs-property"},[s._v("className")]),s._v(")) {\n  result."),_("span",{staticClass:"hljs-title function_"},[s._v("push")]),s._v("(element)\n  }\n  }\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" result; }\n"),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" highs = "),_("span",{staticClass:"hljs-title function_"},[s._v("getElementsByClassName")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v("'high'")]),s._v(");\nhighs."),_("span",{staticClass:"hljs-title function_"},[s._v("forEach")]),s._v("("),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("item")]),s._v(") {\n  item."),_("span",{staticClass:"hljs-property"},[s._v("style")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("color")]),s._v(" = "),_("span",{staticClass:"hljs-string"},[s._v("'red'")]),s._v(";\n});\n")]),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")])]),s._v("\n")])]),_("h4",[s._v("7.3.2. 使用字符串保存数据")]),_("p",[s._v("一般情况下，我们都愿意使用数组来保存数据。但我看到有的框架中，使用的却是字符串。")]),_("p",[s._v("使用时，仍需要把字符串切分成数组。虽然不一定用到正则，但总感觉酷酷的，这里分享如下：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" utils = {}; "),_("span",{staticClass:"hljs-string"},[s._v('"Boolean|Number|String|Function|Array|Date|RegExp|Object|Error"')]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"|"')]),s._v(")."),_("span",{staticClass:"hljs-title function_"},[s._v("forEach")]),s._v("(fun\nction (item) {\n  utils["),_("span",{staticClass:"hljs-string"},[s._v('"is"')]),s._v(" + item] = "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("obj")]),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" {}."),_("span",{staticClass:"hljs-property"},[s._v("toString")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("call")]),s._v("(obj) == "),_("span",{staticClass:"hljs-string"},[s._v('"[object "')]),s._v(" + item + "),_("span",{staticClass:"hljs-string"},[s._v('"]"')]),s._v(";\n  };\n});\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( utils."),_("span",{staticClass:"hljs-title function_"},[s._v("isArray")]),s._v("(["),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),_("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),_("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("]) );\n"),_("span",{staticClass:"hljs-comment"},[s._v("// => true")]),s._v("\n")])]),_("h4",[s._v("7.3.3. "),_("code",[s._v("if")]),s._v(" 语句中使用正则替代 "),_("code",[s._v("&&")])]),_("p",[s._v("比如，模拟 "),_("code",[s._v("ready")]),s._v(" 函数，即加载完毕后再执行回调（不兼容 "),_("code",[s._v("IE")]),s._v(" 的）：")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" readyRE = "),_("span",{staticClass:"hljs-regexp"},[s._v("/complete|loaded|interactive/")]),s._v(";\n"),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("ready")]),s._v(" (callback) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (readyRE."),_("span",{staticClass:"hljs-title function_"},[s._v("test")]),s._v("("),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("readyState")]),s._v(") && "),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-property"},[s._v("body")]),s._v(") {\n  "),_("span",{staticClass:"hljs-title function_"},[s._v("callback")]),s._v("()\n  }\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n  "),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("addEventListener")]),s._v("(\n  "),_("span",{staticClass:"hljs-string"},[s._v("'DOMContentLoaded'")]),s._v(",\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"}),s._v(") {\n  "),_("span",{staticClass:"hljs-title function_"},[s._v("callback")]),s._v("()\n  },\n  "),_("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v("\n  );\n  } };\n"),_("span",{staticClass:"hljs-title function_"},[s._v("ready")]),s._v("("),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"}),s._v(") {\n  "),_("span",{staticClass:"hljs-title function_"},[s._v("alert")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"加载完毕！"')]),s._v(")\n});\n")])]),_("h4",[s._v("7.3.4. 使用强大的 "),_("code",[s._v("replace")])]),_("p",[s._v("因为 "),_("code",[s._v("replace")]),s._v(" 方法比较强大，有时用它根本不是为了替换，只是拿其匹配到的信息来做文章。")]),_("p",[s._v("这里以查询字符串（"),_("code",[s._v("querystring")]),s._v("）压缩技术为例，注意下面 "),_("code",[s._v("replace")]),s._v(" 方法中，回调函数根本没有返回任何东西。")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("compress")]),s._v(" (source) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" keys = {};\n  source."),_("span",{staticClass:"hljs-title function_"},[s._v("replace")]),s._v("("),_("span",{staticClass:"hljs-regexp"},[s._v("/([^=&]+)=([^&]*)/g")]),s._v(", "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"},[s._v("full, key, value")]),s._v(") {\n  keys[key] = (keys[key] ? keys[key] + "),_("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(" : "),_("span",{staticClass:"hljs-string"},[s._v("''")]),s._v(") + value;\n  });\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = [];\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" key "),_("span",{staticClass:"hljs-keyword"},[s._v("in")]),s._v(" keys) {\n  result."),_("span",{staticClass:"hljs-title function_"},[s._v("push")]),s._v("(key + "),_("span",{staticClass:"hljs-string"},[s._v("'='")]),s._v(" + keys[key]);\n  }\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" result."),_("span",{staticClass:"hljs-title function_"},[s._v("join")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v("'&'")]),s._v("); }\n"),_("span",{staticClass:"hljs-variable language_"},[s._v("console")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("log")]),s._v("( "),_("span",{staticClass:"hljs-title function_"},[s._v("compress")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"a=1&b=2&a=3&b=4"')]),s._v(") );\n"),_("span",{staticClass:"hljs-comment"},[s._v('// => "a=1,3&b=2,4"')]),s._v("\n")])]),_("h4",[s._v("7.3.5. 综合运用")]),_("p",[s._v("最后这里再做个简单实用的正则测试器")]),_("pre",{staticClass:"hljs"},[_("code",[_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("section")]),s._v(">")]),s._v("\n  "),_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("div")]),s._v(" "),_("span",{staticClass:"hljs-attr"},[s._v("id")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"err"')]),s._v(">")]),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("div")]),s._v(">")]),s._v("\n  "),_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("input")]),s._v(" "),_("span",{staticClass:"hljs-attr"},[s._v("id")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"regex"')]),s._v(" "),_("span",{staticClass:"hljs-attr"},[s._v("placeholder")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"请输入正则表达式"')]),s._v(">")]),s._v("\n  "),_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("input")]),s._v(" "),_("span",{staticClass:"hljs-attr"},[s._v("id")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"text"')]),s._v(" "),_("span",{staticClass:"hljs-attr"},[s._v("placeholder")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"请输入测试文本"')]),s._v(">")]),s._v("\n  "),_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("button")]),s._v(" "),_("span",{staticClass:"hljs-attr"},[s._v("id")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"run"')]),s._v(">")]),s._v("测试一下"),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("button")]),s._v(">")]),s._v("\n  "),_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("div")]),s._v(" "),_("span",{staticClass:"hljs-attr"},[s._v("id")]),s._v("="),_("span",{staticClass:"hljs-string"},[s._v('"result"')]),s._v(">")]),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("div")]),s._v(">")]),s._v("\n"),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("section")]),s._v(">")]),s._v("\n"),_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("style")]),s._v(">")]),_("span",{staticClass:"language-css"},[s._v("\n"),_("span",{staticClass:"hljs-selector-tag"},[s._v("section")]),s._v("{\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("display")]),s._v(":flex;\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("flex-direction")]),s._v(":column;\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("justify-content")]),s._v(":space-around;\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("height")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("300px")]),s._v(";\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("padding")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" "),_("span",{staticClass:"hljs-number"},[s._v("200px")]),s._v("; }\n"),_("span",{staticClass:"hljs-selector-tag"},[s._v("section")]),s._v(" *{\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("min-height")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("30px")]),s._v("; }\n"),_("span",{staticClass:"hljs-selector-id"},[s._v("#err")]),s._v(" {\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("color")]),s._v(":red;\n}\n"),_("span",{staticClass:"hljs-selector-id"},[s._v("#result")]),s._v("{\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("line-height")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("30px")]),s._v("; }\n"),_("span",{staticClass:"hljs-selector-class"},[s._v(".info")]),s._v(" {\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("background")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("#00c5ff")]),s._v(";\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("padding")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("2px")]),s._v(";\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("margin")]),s._v(":"),_("span",{staticClass:"hljs-number"},[s._v("2px")]),s._v(";\n  "),_("span",{staticClass:"hljs-attribute"},[s._v("display")]),s._v(":inline-block; }\n")]),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("style")]),s._v(">")]),s._v("\n"),_("span",{staticClass:"hljs-tag"},[s._v("<"),_("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),_("span",{staticClass:"language-javascript"},[s._v("\n("),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"}),s._v(") {\n  "),_("span",{staticClass:"hljs-comment"},[s._v("// 获取相应dom元素")]),s._v("\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regexInput = "),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("getElementById")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"regex"')]),s._v(");\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" textInput = "),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("getElementById")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"text"')]),s._v(");\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" runBtn = "),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("getElementById")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"run"')]),s._v(");\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" errBox = "),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("getElementById")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"err"')]),s._v(");\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" resultBox = "),_("span",{staticClass:"hljs-variable language_"},[s._v("document")]),s._v("."),_("span",{staticClass:"hljs-title function_"},[s._v("getElementById")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"result"')]),s._v(");\n  "),_("span",{staticClass:"hljs-comment"},[s._v("// 绑定点击事件")]),s._v("\n  runBtn."),_("span",{staticClass:"hljs-property"},[s._v("onclick")]),s._v(" = "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),_("span",{staticClass:"hljs-params"}),s._v(") {\n  "),_("span",{staticClass:"hljs-comment"},[s._v("// 清除错误和结果")]),s._v("\n  errBox."),_("span",{staticClass:"hljs-property"},[s._v("innerHTML")]),s._v(" = "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(";\n  resultBox."),_("span",{staticClass:"hljs-property"},[s._v("innerHTML")]),s._v(" = "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(";\n  "),_("span",{staticClass:"hljs-comment"},[s._v("// 获取正则和文本")]),s._v("\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" text = textInput."),_("span",{staticClass:"hljs-property"},[s._v("value")]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" regex = regexInput."),_("span",{staticClass:"hljs-property"},[s._v("value")]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (regex == "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(") {\n  errBox."),_("span",{staticClass:"hljs-property"},[s._v("innerHTML")]),s._v(" = "),_("span",{staticClass:"hljs-string"},[s._v('"请输入正则表达式"')]),s._v(";\n  } "),_("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (text == "),_("span",{staticClass:"hljs-string"},[s._v('""')]),s._v(") {\n  errBox."),_("span",{staticClass:"hljs-property"},[s._v("innerHTML")]),s._v(" = "),_("span",{staticClass:"hljs-string"},[s._v('"请输入测试文本"')]),s._v(";\n  } "),_("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n  regex = "),_("span",{staticClass:"hljs-title function_"},[s._v("createRegex")]),s._v("(regex);\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (!regex) "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result, results = [];\n  "),_("span",{staticClass:"hljs-comment"},[s._v("// 没有修饰符g的话，会死循环")]),s._v("\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (regex."),_("span",{staticClass:"hljs-property"},[s._v("global")]),s._v(") {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v("(result = regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(text)) {\n  results."),_("span",{staticClass:"hljs-title function_"},[s._v("push")]),s._v("(result);\n  }\n  } "),_("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n  results."),_("span",{staticClass:"hljs-title function_"},[s._v("push")]),s._v("(regex."),_("span",{staticClass:"hljs-title function_"},[s._v("exec")]),s._v("(text));\n  }\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (results["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("] == "),_("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(") {\n  resultBox."),_("span",{staticClass:"hljs-property"},[s._v("innerHTML")]),s._v(" = "),_("span",{staticClass:"hljs-string"},[s._v('"匹配到0个结果"')]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(";\n  }\n  "),_("span",{staticClass:"hljs-comment"},[s._v("// 倒序是有必要的")]),s._v("\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = results."),_("span",{staticClass:"hljs-property"},[s._v("length")]),s._v(" - "),_("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("; i >= "),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("; i--) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" result = results[i];\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" match = result["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("];\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" prefix = text."),_("span",{staticClass:"hljs-title function_"},[s._v("substr")]),s._v("("),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", result."),_("span",{staticClass:"hljs-property"},[s._v("index")]),s._v(");\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" suffix = text."),_("span",{staticClass:"hljs-title function_"},[s._v("substr")]),s._v("(result."),_("span",{staticClass:"hljs-property"},[s._v("index")]),s._v(" + match."),_("span",{staticClass:"hljs-property"},[s._v("length")]),s._v(");\n  text = prefix\n  + "),_("span",{staticClass:"hljs-string"},[s._v("'<span class=\"info\">'")]),s._v("\n  + match\n  + "),_("span",{staticClass:"hljs-string"},[s._v("'</span>'")]),s._v("\n  + suffix;\n  }\n  resultBox."),_("span",{staticClass:"hljs-property"},[s._v("innerHTML")]),s._v(" = "),_("span",{staticClass:"hljs-string"},[s._v('"匹配到"')]),s._v(" + results."),_("span",{staticClass:"hljs-property"},[s._v("length")]),s._v(" + "),_("span",{staticClass:"hljs-string"},[s._v('"个结果:<br>"')]),s._v(" + text;\n  }\n  };\n  "),_("span",{staticClass:"hljs-comment"},[s._v("// 生成正则表达式，核心函数")]),s._v("\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),_("span",{staticClass:"hljs-title function_"},[s._v("createRegex")]),s._v(" (regex) {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("try")]),s._v(" {\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (regex["),_("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("] == "),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(") {\n  regex = regex."),_("span",{staticClass:"hljs-title function_"},[s._v("split")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(");\n  regex."),_("span",{staticClass:"hljs-title function_"},[s._v("shift")]),s._v("();\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" flags = regex."),_("span",{staticClass:"hljs-title function_"},[s._v("pop")]),s._v("();\n  regex = regex."),_("span",{staticClass:"hljs-title function_"},[s._v("join")]),s._v("("),_("span",{staticClass:"hljs-string"},[s._v('"/"')]),s._v(");\n  regex = "),_("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("(regex, flags);\n  } "),_("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n  regex = "),_("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),_("span",{staticClass:"hljs-title class_"},[s._v("RegExp")]),s._v("(regex, "),_("span",{staticClass:"hljs-string"},[s._v('"g"')]),s._v(");\n  }\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" regex;\n  } "),_("span",{staticClass:"hljs-keyword"},[s._v("catch")]),s._v("(e) {\n  errBox."),_("span",{staticClass:"hljs-property"},[s._v("innerHTML")]),s._v(" = "),_("span",{staticClass:"hljs-string"},[s._v('"无效的正则表达式"')]),s._v(";\n  "),_("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),_("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n  }\n  }\n})();\n")]),_("span",{staticClass:"hljs-tag"},[s._v("</"),_("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),s._v("\n")])]),_("p",[s._v("完！！！")])])}],l={name:"vc-component-doc",components:{},data:function(){return{}}},n=l,e=t("2877"),c=Object(e["a"])(n,_,v,!1,null,null,null);a["default"]=c.exports},"304d":function(s,a,t){s.exports=t.p+"img/微信截图_20211219175244.0f5c07bd.png"},3085:function(s,a,t){s.exports=t.p+"img/微信截图_20211221230642.797a4715.png"},"369c":function(s,a,t){s.exports=t.p+"img/微信截图_20211219155900.3f41a567.png"},"3d51":function(s,a,t){s.exports=t.p+"img/微信截图_20211219155731.1c89b041.png"},"478b":function(s,a,t){s.exports=t.p+"img/微信截图_20211219174935.434828e7.png"},"48a2":function(s,a,t){s.exports=t.p+"img/微信截图_20211219154202.922f7bc3.png"},"4a6a":function(s,a,t){s.exports=t.p+"img/微信截图_20211221221651.8d72bcb1.png"},"57fc":function(s,a,t){s.exports=t.p+"img/微信截图_20211219230752.679a7c74.png"},5925:function(s,a,t){s.exports=t.p+"img/微信截图_20211219154447.858ed9ed.png"},"5fab":function(s,a,t){s.exports=t.p+"img/微信截图_20211221204927.307ccb2f.png"},6164:function(s,a,t){s.exports=t.p+"img/微信截图_20211220000031.e395b24a.png"},"63ab":function(s,a,t){s.exports=t.p+"img/微信截图_20211219225240.36ed0421.png"},"6fad":function(s,a,t){s.exports=t.p+"img/微信截图_20211219140323.83a8c843.png"},"7af4":function(s,a,t){s.exports=t.p+"img/微信截图_20211219101110.c48196dd.png"},"804c":function(s,a,t){s.exports=t.p+"img/微信截图_20211220000110.f86812f4.png"},"863d":function(s,a,t){s.exports=t.p+"img/微信截图_20211219152846.fb17804a.png"},a284:function(s,a,t){s.exports=t.p+"img/微信截图_20211219154628.a189a10c.png"},a896:function(s,a,t){s.exports=t.p+"img/微信截图_20211219174005.6597acd0.png"},babd:function(s,a,t){s.exports=t.p+"img/微信截图_20211220013239.97483d1e.png"},dd6b:function(s,a,t){s.exports=t.p+"img/微信截图_20211221205246.cc672b0e.png"},efc8:function(s,a,t){s.exports=t.p+"img/微信截图_20211220005910.5fa88511.png"}}]);
//# sourceMappingURL=chunk-23080859.1a541dd3.js.map